[{"C:\\Users\\moguz\\OneDrive\\Masaüstü\\cs491repo\\projectDraft\\react\\qrder\\src\\index.js":"1","C:\\Users\\moguz\\OneDrive\\Masaüstü\\cs491repo\\projectDraft\\react\\qrder\\src\\reportWebVitals.js":"2","C:\\Users\\moguz\\OneDrive\\Masaüstü\\cs491repo\\projectDraft\\react\\qrder\\src\\App.js":"3","C:\\Users\\moguz\\OneDrive\\Masaüstü\\cs491repo\\projectDraft\\react\\qrder\\src\\redux\\reducers.js":"4","C:\\Users\\moguz\\OneDrive\\Masaüstü\\cs491repo\\projectDraft\\react\\qrder\\src\\redux\\setReducers.js":"5","C:\\Users\\moguz\\OneDrive\\Masaüstü\\cs491repo\\projectDraft\\react\\qrder\\src\\redux\\actions.js":"6","C:\\Users\\moguz\\OneDrive\\Masaüstü\\cs491repo\\projectDraft\\react\\qrder\\src\\ApplicationRoutes.js":"7","C:\\Users\\moguz\\OneDrive\\Masaüstü\\cs491repo\\projectDraft\\react\\qrder\\src\\components\\mainFrames\\LoginPage.js":"8","C:\\Users\\moguz\\OneDrive\\Masaüstü\\cs491repo\\projectDraft\\react\\qrder\\src\\serviceWorker.js":"9","C:\\Users\\moguz\\OneDrive\\Masaüstü\\cs491repo\\projectDraft\\react\\qrder\\src\\requests\\auth.js":"10","C:\\Users\\moguz\\OneDrive\\Masaüstü\\cs491repo\\projectDraft\\react\\qrder\\src\\requests\\restaurant.js":"11","C:\\Users\\moguz\\OneDrive\\Masaüstü\\cs491repo\\projectDraft\\react\\qrder\\src\\components\\mainFrames\\MainPage.js":"12","C:\\Users\\moguz\\OneDrive\\Masaüstü\\cs491repo\\projectDraft\\react\\qrder\\src\\components\\drawers\\LeftDrawer.js":"13","C:\\Users\\moguz\\OneDrive\\Masaüstü\\cs491repo\\projectDraft\\react\\qrder\\src\\components\\drawers\\RightDrawer.js":"14","C:\\Users\\moguz\\OneDrive\\Masaüstü\\cs491repo\\projectDraft\\react\\qrder\\src\\components\\mainPanels\\OrderPanel.js":"15","C:\\Users\\moguz\\OneDrive\\Masaüstü\\cs491repo\\projectDraft\\react\\qrder\\src\\components\\mainFrames\\RegisterPage.js":"16","C:\\Users\\moguz\\OneDrive\\Masaüstü\\cs491repo\\projectDraft\\react\\qrder\\src\\components\\mainPanels\\MenuPanel.js":"17","C:\\Users\\moguz\\OneDrive\\Masaüstü\\cs491repo\\projectDraft\\react\\qrder\\src\\components\\mainPanels\\Item\\ItemPanel.js":"18","C:\\Users\\moguz\\OneDrive\\Masaüstü\\cs491repo\\projectDraft\\react\\qrder\\src\\components\\mainPanels\\Item\\ItemDetailsPanel.js":"19","C:\\Users\\moguz\\OneDrive\\Masaüstü\\cs491repo\\projectDraft\\react\\qrder\\src\\components\\mainPanels\\order\\OrderCreatePanel.js":"20","C:\\Users\\moguz\\OneDrive\\Masaüstü\\cs491repo\\projectDraft\\react\\qrder\\src\\components\\mainPanels\\Item\\ItemsPanel.js":"21","C:\\Users\\moguz\\OneDrive\\Masaüstü\\cs491repo\\projectDraft\\react\\qrder\\src\\components\\mainPanels\\Item\\MiniItemPanel.js":"22","C:\\Users\\moguz\\OneDrive\\Masaüstü\\cs491repo\\projectDraft\\react\\qrder\\src\\components\\mainPanels\\tables\\TablePanel.js":"23","C:\\Users\\moguz\\OneDrive\\Masaüstü\\cs491repo\\projectDraft\\react\\qrder\\src\\components\\mainPanels\\tables\\Table.js":"24","C:\\Users\\moguz\\OneDrive\\Masaüstü\\cs491repo\\projectDraft\\react\\qrder\\src\\components\\mainPanels\\tables\\TableDetails.js":"25","C:\\Users\\moguz\\OneDrive\\Masaüstü\\cs491repo\\projectDraft\\react\\qrder\\src\\components\\mainPanels\\order\\MiniOrderPanel.js":"26","C:\\Users\\moguz\\OneDrive\\Masaüstü\\cs491repo\\projectDraft\\react\\qrder\\src\\components\\mainPanels\\tables\\MiniServicePanel.js":"27","C:\\Users\\moguz\\OneDrive\\Masaüstü\\cs491repo\\projectDraft\\react\\qrder\\src\\components\\mainPanels\\ProfileEditPanel.js":"28","C:\\Users\\moguz\\OneDrive\\Masaüstü\\cs491repo\\projectDraft\\react\\qrder\\src\\requests\\order.js":"29","C:\\Users\\moguz\\OneDrive\\Masaüstü\\cs491repo\\projectDraft\\react\\qrder\\src\\mqtt\\client.js":"30"},{"size":804,"mtime":1609070721220,"results":"31","hashOfConfig":"32"},{"size":362,"mtime":499162500000,"results":"33","hashOfConfig":"32"},{"size":1150,"mtime":1610018713143,"results":"34","hashOfConfig":"32"},{"size":1956,"mtime":1609080381221,"results":"35","hashOfConfig":"32"},{"size":561,"mtime":1609080402806,"results":"36","hashOfConfig":"32"},{"size":1261,"mtime":1609081238883,"results":"37","hashOfConfig":"32"},{"size":1649,"mtime":1608075939655,"results":"38","hashOfConfig":"32"},{"size":6208,"mtime":1609056866945,"results":"39","hashOfConfig":"32"},{"size":5086,"mtime":499162500000,"results":"40","hashOfConfig":"32"},{"size":1454,"mtime":1608888285719,"results":"41","hashOfConfig":"32"},{"size":8094,"mtime":1610159274102,"results":"42","hashOfConfig":"32"},{"size":3649,"mtime":1610039056395,"results":"43","hashOfConfig":"32"},{"size":5969,"mtime":1610159866925,"results":"44","hashOfConfig":"32"},{"size":7431,"mtime":1610161938534,"results":"45","hashOfConfig":"32"},{"size":6715,"mtime":1610043234838,"results":"46","hashOfConfig":"32"},{"size":10433,"mtime":1608893399366,"results":"47","hashOfConfig":"32"},{"size":7052,"mtime":1608910680970,"results":"48","hashOfConfig":"32"},{"size":13808,"mtime":1610150099947,"results":"49","hashOfConfig":"32"},{"size":4629,"mtime":1610148983477,"results":"50","hashOfConfig":"32"},{"size":15124,"mtime":1610152914523,"results":"51","hashOfConfig":"32"},{"size":5549,"mtime":1608910856907,"results":"52","hashOfConfig":"32"},{"size":4821,"mtime":1608131451951,"results":"53","hashOfConfig":"32"},{"size":6444,"mtime":1610151987467,"results":"54","hashOfConfig":"32"},{"size":4604,"mtime":1609889595922,"results":"55","hashOfConfig":"32"},{"size":11259,"mtime":1610152655413,"results":"56","hashOfConfig":"32"},{"size":6067,"mtime":1610152778523,"results":"57","hashOfConfig":"32"},{"size":5916,"mtime":1610152849604,"results":"58","hashOfConfig":"32"},{"size":13158,"mtime":1610160037801,"results":"59","hashOfConfig":"32"},{"size":2603,"mtime":1609888997760,"results":"60","hashOfConfig":"32"},{"size":1758,"mtime":1610042451864,"results":"61","hashOfConfig":"32"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},"ne4954",{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"67"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"64"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"64"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80","usedDeprecatedRules":"64"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83","usedDeprecatedRules":"64"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"92","usedDeprecatedRules":"64"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"95","usedDeprecatedRules":"64"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"98"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"101","usedDeprecatedRules":"64"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"104","usedDeprecatedRules":"64"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":18,"fixableErrorCount":0,"fixableWarningCount":0,"source":"107","usedDeprecatedRules":"64"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":25,"fixableErrorCount":0,"fixableWarningCount":0,"source":"110","usedDeprecatedRules":"64"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"113","usedDeprecatedRules":"64"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":39,"fixableErrorCount":0,"fixableWarningCount":0,"source":"116","usedDeprecatedRules":"64"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"119","usedDeprecatedRules":"64"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"122","usedDeprecatedRules":"64"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"125","usedDeprecatedRules":"64"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"128","usedDeprecatedRules":"64"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":31,"fixableErrorCount":0,"fixableWarningCount":0,"source":"131","usedDeprecatedRules":"64"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"134","usedDeprecatedRules":"64"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"137","usedDeprecatedRules":"64"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":35,"fixableErrorCount":0,"fixableWarningCount":0,"source":"140","usedDeprecatedRules":"64"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"143","usedDeprecatedRules":"64"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"146","usedDeprecatedRules":"64"},"C:\\Users\\moguz\\OneDrive\\Masaüstü\\cs491repo\\projectDraft\\react\\qrder\\src\\index.js",[],["147","148"],"C:\\Users\\moguz\\OneDrive\\Masaüstü\\cs491repo\\projectDraft\\react\\qrder\\src\\reportWebVitals.js",[],["149","150"],"C:\\Users\\moguz\\OneDrive\\Masaüstü\\cs491repo\\projectDraft\\react\\qrder\\src\\App.js",["151","152","153","154","155","156","157"],"\nimport logo from './logo.svg';\nimport './App.css';\nimport { useDispatch, useSelector} from 'react-redux';\nimport { setDisplayingPanel, setToken, setUser, test } from './redux/actions';\nimport ApplicationRoutes from './ApplicationRoutes';\nimport TablePanel from './components/mainPanels/tables/TablePanel';\nimport { getUserInfo, removeItem } from './requests/restaurant';\nimport OrderPanel from './components/mainPanels/OrderPanel';\nimport { Connector } from 'react-mqtt-client'\n\n\nfunction App() {\n  /*const token = useSelector(state => state.token);\n  const dispatch = useDispatch();\n  return (\n    <>\n    hey + {token}\n    <br/>\n    <button onClick={()=> dispatch(setToken(\"newtoken1\"))}>setToken</button>\n    </>\n  );*/  \n   \n  const dispatch = useDispatch();\n  \n  if(localStorage.getItem(\"token\")){   \n    dispatch(setToken(localStorage.getItem(\"token\")));\n    var user = localStorage.getItem(\"user\");\n    dispatch(setUser(JSON.parse(user)));\n    dispatch(setDisplayingPanel(<OrderPanel/>));\n  }\n\n /* const dispatch = useDispatch();\n  dispatch(setToken(localStorage.getItem(\"token\")));*/\n    return ApplicationRoutes();\n  \n}\n\nexport default App;\n","C:\\Users\\moguz\\OneDrive\\Masaüstü\\cs491repo\\projectDraft\\react\\qrder\\src\\redux\\reducers.js",[],"C:\\Users\\moguz\\OneDrive\\Masaüstü\\cs491repo\\projectDraft\\react\\qrder\\src\\redux\\setReducers.js",["158"],"\r\nconst { combineReducers } = require(\"redux\");\r\nconst {setAuth, setUserInfo, setOrderList, setPanelList, setDisplay, setRestaurantMenu, setRestaurantTables, setTabDisplayValue, setTest, setTest2 } = require(\"./reducers\");\r\n\r\n\r\n\r\n\r\nconst setReducers = combineReducers({\r\n    token : setAuth,\r\n    user : setUserInfo,\r\n    orders : setOrderList,\r\n    display : setDisplay,\r\n    menu : setRestaurantMenu,\r\n    tables : setRestaurantTables,\r\n    displayValue : setTabDisplayValue,\r\n    mqtt : setTest,\r\n    tableUpdate : setTest2\r\n})\r\n\r\nexport default setReducers;","C:\\Users\\moguz\\OneDrive\\Masaüstü\\cs491repo\\projectDraft\\react\\qrder\\src\\redux\\actions.js",[],"C:\\Users\\moguz\\OneDrive\\Masaüstü\\cs491repo\\projectDraft\\react\\qrder\\src\\ApplicationRoutes.js",["159","160","161","162"],"\r\nimport React, { useEffect } from \"react\";\r\nimport {\r\n  BrowserRouter as Router,\r\n  Route,\r\n  Redirect,\r\n  Switch,\r\n} from \"react-router-dom\";\r\nimport { useState } from \"react\";\r\nimport LoginPage from \"./components/mainFrames/LoginPage\";\r\nimport MainPage from \"./components/mainFrames/MainPage\";\r\nimport { useSelector } from \"react-redux\";\r\nimport RegisterPage from \"./components/mainFrames/RegisterPage\";\r\n\r\nconst ApplicationRoutes = () => {\r\n\r\n\r\n  const [collapse, setCollapse] = useState(false);\r\n\r\n  const handleToggle = (event) => {\r\n    event.preventDefault();\r\n    collapse ? setCollapse(false) : setCollapse(true);\r\n  };\r\n\r\n  const token = useSelector(state => state.token);\r\n\r\n  return (\r\n    <Router>      \r\n              { (token != 1 && token != \"undefined\") ? (\r\n                //Autheticated Routing\r\n                <Switch>\r\n                   <Route path=\"/mainPage\" component={MainPage}/>\r\n                   <Redirect from=\"/login\" to=\"/mainPage\" /> \r\n                   <Redirect from=\"/register\" to=\"/mainPage\" />                   \r\n                   <Redirect from=\"/\" to=\"/mainPage\" />\r\n                </Switch>\r\n              ) :  (\r\n                //Unauthenticated Routing\r\n                <Switch>\r\n                  <Route path=\"/login\" component={LoginPage} />\r\n                  <Route path=\"/register\" component={RegisterPage} />                  \r\n                  <Redirect from=\"/mainPage\" to=\"/login\" /> \r\n                  <Redirect from=\"/\" to=\"/login\" /> \r\n                </Switch>\r\n              \r\n                  )}\r\n                  \r\n    </Router>\r\n  );\r\n};\r\n\r\nexport default ApplicationRoutes;\r\n","C:\\Users\\moguz\\OneDrive\\Masaüstü\\cs491repo\\projectDraft\\react\\qrder\\src\\components\\mainFrames\\LoginPage.js",["163","164"],"import { Button, TextField, withStyles } from '@material-ui/core';\r\nimport React from 'react';\r\nimport { connect, useDispatch } from 'react-redux';\r\nimport { withRouter } from 'react-router-dom';\r\nimport { login } from '../../requests/auth';\r\nimport {setDisplayingPanel, setMenu, setToken, setUser} from '../../redux/actions'\r\nimport { getUserInfo, requestMenu } from '../../requests/restaurant';\r\nimport TablePanel from '../mainPanels/tables/TablePanel';\r\nimport { AccountBox, VpnKey } from '@material-ui/icons';\r\nimport OrderPanel from '../mainPanels/OrderPanel';\r\n\r\n\r\n\r\nclass LoginPage extends React.Component{\r\n    \r\n    state = {\r\n        loading : false\r\n    };\r\n\r\n    login = () => {\r\n        const { history } = this.props;\r\n\r\n        this.setState({loading : true});\r\n        login(this.username.value,this.password.value).then((response)=>{            \r\n            if(response){            \r\n                this.props.dispatch(setToken(response.token));\r\n                getUserInfo(response.token).then((result)=>{\r\n                    console.log(result);\r\n                    this.props.dispatch(setUser(result));\r\n                    this.setState({loading:true});\r\n                    var temp = [];        \r\n                    requestMenu(response.token).then((response2) => {   \r\n                        console.log(response2);\r\n                        for (const [key, value] of Object.entries(response2.data.items)) {                                    //check missing arguments\r\n                            temp.push({name:key,\r\n                                    Items:value});\r\n                        }\r\n                        this.props.dispatch(setMenu({catalog:response2.data.catalog,\r\n                                                    items:temp}));\r\n                        this.props.dispatch(setDisplayingPanel(<OrderPanel/>));\r\n                    });\r\n                    \r\n                    history.push(\"/mainPage\");\r\n                });\r\n            } else{\r\n                this.setState({loading : false});\r\n            }\r\n                       \r\n        }).catch((error)=>{\r\n            console.log(\"error is : \" + error );\r\n            this.setState({loading : false});\r\n        });       \r\n\r\n    }\r\n\r\n    register = () => {\r\n        const { history } = this.props;\r\n        history.push(\"/register\");\r\n    }\r\n\r\n    render(){\r\n        const {classes } = this.props;\r\n\r\n        const {loading} = this.state;\r\n\r\n        \r\n        return(\r\n        <div className=\"App\">\r\n          <header className=\"App-Header\">\r\n              <h1 className=\"title\">Qrder</h1>\r\n        </header>\r\n        <body className=\"App-body\">\r\n        <div className=\"Panel\"> \r\n          <div className=\"LoginPanel\">\r\n            {loading ? (<>\r\n            loging in...</>\r\n                ):(\r\n                     <>\r\n                     \r\n            <TextField id=\"username\" label = \"Username\" \r\n            defaultValue = \"test10\"\r\n            className = {classes.main}\r\n            inputRef={el => this.username = el} \r\n            InputProps={{\r\n                    classes:{\r\n                        input:classes.font\r\n                    }\r\n                }}\r\n                InputLabelProps={{\r\n                    classes:{\r\n                        root: classes.font,\r\n                    }\r\n                }}\r\n\r\n                 />\r\n                 <AccountBox style={{fontSize:\"50px\"}}/>\r\n                 <br/>\r\n                 <br/>\r\n                  <TextField id=\"password\" label = \"Password\" \r\n                  defaultValue = \"test10\"\r\n                  type=\"password\"\r\n                  inputRef={el => this.password = el} \r\n                    className = {classes.main}\r\n                    InputProps={{\r\n                            classes:{\r\n                                input:classes.font\r\n                            }\r\n                        }}\r\n                        InputLabelProps={{\r\n                            classes:{\r\n                                root: classes.font,\r\n                            }\r\n                        }}\r\n                 ><input type=\"password\"/></TextField>                 \r\n                 <VpnKey style={{fontSize:\"50px\"}}/>                \r\n                 <br/>\r\n                 <br/>\r\n                 <span className=\"ButtonLayout\">\r\n                 <Button\r\n                    classes={{\r\n                        root: classes.buttonRoot, // class name, e.g. `classes-nesting-root-x`\r\n                        label: classes.buttonLabel, // class name, e.g. `classes-nesting-label-x`\r\n                    }}\r\n                    onClick={this.login}\r\n                >login</Button>\r\n                </span>\r\n                <span className=\"ButtonLayout\">\r\n                <Button\r\n                    classes={{\r\n                        root: classes.buttonRoot, // class name, e.g. `classes-nesting-root-x`\r\n                        label: classes.buttonLabel, // class name, e.g. `classes-nesting-label-x`\r\n                    }}\r\n                    onClick={this.register}\r\n                >SignUp</Button>\r\n                </span></>\r\n                )}\r\n           \r\n          </div>\r\n          </div>\r\n        </body>\r\n        \r\n      </div>)\r\n        \r\n    }\r\n}\r\n\r\nconst useStyles = {\r\n    main:{\r\n        '& label.Mui-focused': {\r\n            color: '#c4a748d0',\r\n          },          \r\n    '& .MuiInput-underline:after': {\r\n        borderBottomColor: '#c4a748d0',\r\n      },\r\n    },\r\n    font:{\r\n        color : \"#c4a748d0\",\r\n        '&:-webkit-autofill': {\r\n            transitionDelay: '9999s',\r\n            transitionProperty: 'background-color, color',\r\n          },\r\n    },\r\n    buttonRoot: {\r\n        background: 'linear-gradient(45deg, #c4a748d0 30%, #c4a748d0 90%)',\r\n        borderRadius: 3,\r\n        border: 0,\r\n        color: 'black',\r\n        height: 48,\r\n        padding: '0 30px',\r\n      },\r\n    buttonLabel: {\r\n        textTransform: 'capitalize',\r\n    },\r\n}\r\n\r\nconst mapStateToProps = state =>({\r\n    token : state.token,\r\n    user : state.user,\r\n    menu : state.menu,\r\n})\r\n\r\nexport default connect(mapStateToProps,null)(withRouter(withStyles(useStyles)(LoginPage)));","C:\\Users\\moguz\\OneDrive\\Masaüstü\\cs491repo\\projectDraft\\react\\qrder\\src\\serviceWorker.js",[],"C:\\Users\\moguz\\OneDrive\\Masaüstü\\cs491repo\\projectDraft\\react\\qrder\\src\\requests\\auth.js",[],"C:\\Users\\moguz\\OneDrive\\Masaüstü\\cs491repo\\projectDraft\\react\\qrder\\src\\requests\\restaurant.js",[],"C:\\Users\\moguz\\OneDrive\\Masaüstü\\cs491repo\\projectDraft\\react\\qrder\\src\\components\\mainFrames\\MainPage.js",["165","166","167"],"import React from \"react\";\r\nimport {\r\n  AppBar,\r\n  Tabs,\r\n  Tab,\r\n  Box,\r\n  Typography,\r\n} from \"@material-ui/core\";\r\nimport { withRouter } from \"react-router-dom\";\r\nimport LeftDrawer from \"../drawers/LeftDrawer\";\r\nimport RightDrawer from \"../drawers/RightDrawer\";\r\nimport OrderPanel from \"../mainPanels/OrderPanel\";\r\nimport { connect } from \"react-redux\";\r\nimport { setDisplayingPanel, setUser } from \"../../redux/actions\";\r\nimport TablePanel from \"../mainPanels/tables/TablePanel\";\r\nimport resClient from \"../../mqtt/client\"\r\nimport { getUserInfo } from \"../../requests/restaurant\";\r\n\r\n\r\nclass MainPage extends React.Component {\r\n  state = {\r\n    value: 0,\r\n    drawerStyle:null\r\n  };\r\n\r\n  componentDidMount() {\r\n    if(this.props.user){\r\n      resClient.init(this.props.token,this.props.user.uuid);\r\n    }else{\r\n      getUserInfo(this.props.token).then((response)=>{\r\n        console.log(response);\r\n        this.props.dispatch(setUser(response));\r\n        resClient.init(this.props.token,response.uuid);\r\n      });\r\n    }\r\n    \r\n\r\n  }\r\n\r\n  handleTabChange = (event, newValue) => {\r\n    this.setState({ value: newValue });\r\n    if(newValue == 0){\r\n      \r\n      this.props.dispatch(setDisplayingPanel(<OrderPanel/>));\r\n    }else{\r\n      \r\n      this.props.dispatch(setDisplayingPanel(<TablePanel/>));\r\n    }\r\n  };\r\n\r\n  setDisplay = (display)=>{\r\n      this.props.dispatch(setDisplayingPanel(display))\r\n  }\r\n\r\n  render() {\r\n\r\n    console.log(\"hi\");\r\n    \r\n\r\n    return (\r\n        <div className=\"App\">   \r\n        \r\n        <div className = \"App-Main\">\r\n          <LeftDrawer/> \r\n          <RightDrawer/>    \r\n          <header className=\"App-Header\">\r\n                  <h1 className=\"title\">Qrder</h1>\r\n                  <AppBar position=\"static\" className=\"Tab-Length\">\r\n                    <Tabs\r\n                      value={this.state.value}\r\n                      onChange={this.handleTabChange.bind(this)}\r\n                      aria-label=\"simple tabs example\"\r\n                      variant=\"fullWidth\"\r\n                      classes={{\r\n                        root: \"Tab-Color\",\r\n                        indicator: \"Indicator-Color\",\r\n                      }}\r\n                      indicatorColor=\"\"\r\n                    >\r\n                      <Tab label=\"Orders\" {...a11yProps(0)} />\r\n                      {this.props.user== null ? null:this.props.user.serviceType == \"normal\"?<Tab label=\"Tables\" {...a11yProps(1)} />:null}                      \r\n                      \r\n                    </Tabs>\r\n                  </AppBar>    \r\n          </header>\r\n          <body className=\"App-body\">\r\n            <div className=\"Panel\">\r\n              <div className=\"MainPanel\">\r\n                {this.props.display}                \r\n              </div>\r\n            </div>\r\n          </body>\r\n          \r\n          </div>    \r\n        </div>\r\n        \r\n    );\r\n  }\r\n}\r\n\r\nfunction a11yProps(index) {\r\n  return {\r\n    id: `simple-tab-${index}`,\r\n    \"aria-controls\": `simple-tabpanel-${index}`,\r\n  };\r\n}\r\n\r\nfunction TabPanel(props) {\r\n  const { children, value, index, ...other } = props;\r\n\r\n  return (\r\n    <div\r\n      role=\"tabpanel\"\r\n      hidden={value !== index}\r\n      id={`simple-tabpanel-${index}`}\r\n      aria-labelledby={`simple-tab-${index}`}\r\n      {...other}\r\n    >\r\n      {value === index && (\r\n        <Box p={3}>\r\n          <Typography>{children}</Typography>\r\n        </Box>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\nconst mapStateToProps = state =>({\r\n  token : state.token,\r\n  user : state.user,\r\n  display : state.display,\r\n  displayValue : state.value\r\n})\r\nexport default connect(mapStateToProps,null)(withRouter(MainPage));\r\n","C:\\Users\\moguz\\OneDrive\\Masaüstü\\cs491repo\\projectDraft\\react\\qrder\\src\\components\\drawers\\LeftDrawer.js",["168","169","170","171","172","173","174"],"\r\nimport React from \"react\"\r\nimport {  Divider, Drawer,  List, ListItem, ListItemIcon, ListItemText,  withStyles } from \"@material-ui/core\";\r\n\r\nimport ExitToAppIcon from '@material-ui/icons/ExitToApp';\r\nimport { AccountCircle,  Edit, Fastfood, MenuBook, Settings } from \"@material-ui/icons\";\r\nimport { withRouter } from \"react-router-dom\";\r\nimport { connect } from \"react-redux\";\r\nimport { setDisplayingPanel, setToken, setUser } from \"../../redux/actions\";\r\nimport MenuPanel from \"../mainPanels/MenuPanel\";\r\nimport ItemPanel from \"../mainPanels/Item/ItemPanel\";\r\nimport OrderCreatePanel from \"../mainPanels/order/OrderCreatePanel\";\r\nimport ProfileEditPanel from \"../mainPanels/ProfileEditPanel\";\r\nimport { getUserInfo } from \"../../requests/restaurant\";\r\n\r\nclass LeftDrawer extends React.Component {\r\n\r\n  state ={\r\n    open : false,\r\n    userImage : null,\r\n    compListener : null\r\n  }\r\n\r\n  clickhandler(text){\r\n    \r\n    const { history ,match} = this.props;\r\n    switch(text){\r\n      case \"Logout\":\r\n        console.log(localStorage);\r\n        this.props.dispatch(setToken(\"1\"));\r\n        this.props.dispatch(setUser(\"\"));   \r\n        localStorage.removeItem(\"token\");\r\n        localStorage.removeItem(\"user\");\r\n        \r\n        history.push(\"/login\");\r\n      case \"Menu\":\r\n        console.log(\"menu\");\r\n        this.props.dispatch(setDisplayingPanel(<MenuPanel/>));\r\n        break;\r\n      case \"AddItem\":        \r\n        console.log(\"item\");\r\n        this.props.dispatch(setDisplayingPanel(<ItemPanel id=\"itemPanelDrawer\"/>));\r\n        break;        \r\n      case \"AddOrder\":        \r\n        console.log(\"order\");        \r\n        this.props.dispatch(setDisplayingPanel(<OrderCreatePanel/>));\r\n        \r\n        break;\r\n      case \"Edit\":        \r\n        this.props.dispatch(setDisplayingPanel(<ProfileEditPanel/>));\r\n        break;\r\n      default:\r\n        alert(\"hi \" + text);\r\n        \r\n    }\r\n    /*if(text == \"Logout\"){ \r\n      console.log(localStorage);\r\n      this.props.dispatch(setToken(\"1\"));\r\n      this.props.dispatch(setUser(\"\"));   \r\n      localStorage.removeItem(\"token\");\r\n      localStorage.removeItem(\"user\");\r\n       \r\n      history.push(\"/login\");   \r\n    }else if(text == \"Menu\"){   \r\n      this.props.dispatch(setDisplayingPanel(<MenuPanel/>));\r\n\r\n    }else{      \r\n      alert(\"hi \" + text);\r\n      //alert(token);\r\n    }*/\r\n  }\r\n\r\n  componentWillUnmount(){\r\n    document.removeEventListener(\"user\", this.state.compListener);\r\n   }\r\n\r\n   update = () =>{\r\n    if(this.props.user){\r\n      this.setState({userImage:this.props.user.img});\r\n    }else{\r\n      getUserInfo(this.props.token).then((result)=>{\r\n        this.props.dispatch(setUser(result));\r\n        this.setState({userImage:result.img});\r\n      });\r\n    }\r\n   }\r\n  componentDidMount(){\r\n    var compListener = ()=>{this.update()};\r\n    this.setState({compListener:compListener});\r\n    document.addEventListener(\"user\",compListener);\r\n    this.update();\r\n  }\r\n  \r\n  handleLogout(){\r\n      \r\n    const { history ,match} = this.props;\r\n\r\n    history.push(\"/mainPage\");\r\n\r\n  }\r\n\r\n  handleDrawerOpen = () => {\r\n    this.setState({open:true});\r\n  };\r\n\r\n  handleDrawerClose = () => {\r\n    this.setState({open:false});\r\n  };\r\n\r\n  render() {\r\n    const { classes } = this.props;\r\n    \r\n    var image = (this.state.userImage)?(<img  src={this.state.userImage} Height=\"160px\" />  ):(<AccountCircle style={{fontSize:145}}/>)\r\n    const items = [{text:\"User\" , item:image},\r\n                    {text : \"Edit\" , item:<Edit style={{fontSize:70}}/>,label:\"Edit\"},\r\n                   {text : \"Menu\" , item:<MenuBook style={{fontSize:70}}/>,label:\"Menu\"},\r\n                   {text : \"AddItem\" , item:<Fastfood style={{fontSize:70}}/>,label:\"AddItem\"},\r\n                   {text : \"AddOrder\" , item:<><Fastfood style={{fontSize:20}}/><Fastfood style={{fontSize:50}}/></>,label:\"AddOrder\"}];\r\n    return (\r\n      <Drawer anchor=\"left\"variant=\"permanent\" classes={{paper:classes.paper}}>\r\n          <div className=\"Drawer\">\r\n          <List >\r\n          {items.map((text,index) => (\r\n              <ListItem button key={text} onClick={()=>this.clickhandler(items[index].text)} classes={{root:classes.padding}}> \r\n                <ListItemIcon  classes={{root:classes.padding2}}style={{color:\"#c4a748d0\"}}>\r\n                  {items[index].item}\r\n                </ListItemIcon>  \r\n                <ListItemText ><p style={{marginLeft:\"10px\"}}>{items[index].label}</p></ListItemText>\r\n              </ListItem>\r\n            ))}\r\n         \r\n            \r\n          <Divider classes={{root: classes.divider}}/>\r\n              <ListItem button key=\"Logout\" onClick={()=>this.clickhandler(\"Logout\")} classes={{root:classes.padding}}style={{backgroundColor:\"#c4a748d0\"}}>\r\n                <ListItemIcon  classes={{root:classes.padding2}} style={{color:\"#282c34e8\"}}>\r\n                  <ExitToAppIcon style={{fontSize:70}}/> \r\n                </ListItemIcon>\r\n                <ListItemText><p style={{marginLeft:\"10px\"},{color : \"#282c34e8\"}}>Logout</p></ListItemText>\r\n              </ListItem>            \r\n          <Divider classes={{root: classes.divider}}/>\r\n          </List>\r\n          \r\n          </div>\r\n        </Drawer>\r\n    );\r\n  \r\n  }\r\n\r\n}\r\n\r\nconst useStyles ={\r\n  list: {\r\n    width: 250\r\n  },\r\n  fullList: {\r\n    width: \"auto\"\r\n  },\r\n  paper: {\r\n    backgroundColor: \"#282c34e8\",\r\n    overflowX: 'hidden',\r\n    width: 200,\r\n  },\r\n  paper2: {\r\n    backgroundColor: \"#ffffff\",\r\n    overflowX: 'hidden',\r\n    width: 200,\r\n  },\r\n  icon:{\r\n    backgroundColor:\"#c4a748d0\",\r\n    \r\n  },\r\n  padding:{\r\n    justifyContent:\"center\",\r\n    },\r\n    padding2:{\r\n      justifyContent:\"center\"\r\n    },\r\n    divider:{\r\n      backgroundColor:\"#c4a748d0\"\r\n    }\r\n  \r\n};\r\n\r\nconst drawerWidth = 240;\r\n\r\nconst mapStateToProps = state =>({\r\n  token : state.token,\r\n  user : state.user,\r\n  display : state.display\r\n})\r\n\r\nexport default connect(mapStateToProps,null)(withRouter(withStyles(useStyles)(LeftDrawer)));","C:\\Users\\moguz\\OneDrive\\Masaüstü\\cs491repo\\projectDraft\\react\\qrder\\src\\components\\drawers\\RightDrawer.js",["175","176","177","178","179","180"],"import React from \"react\"\r\n\r\nimport {  Divider, Drawer, List, ListItem, ListItemIcon, ListItemText,  withStyles } from \"@material-ui/core\";\r\nimport { AccountBalanceWallet,  CheckBox,  Face,  HourglassFull } from \"@material-ui/icons\";\r\nimport { connect } from \"react-redux\";\r\nimport MainPage from \"../mainFrames/MainPage\";\r\nimport { setDisplayingPanel, setUser } from \"../../redux/actions\";\r\nimport { getMetrics, getUserInfo } from \"../../requests/restaurant\";\r\n\r\nvar QRCode = require('qrcode.react');\r\n\r\nclass RightDrawer extends React.Component {\r\n\r\n  state ={\r\n    open : false,\r\n    items : [],\r\n    tableStatus : [],\r\n    compListener :null,\r\n    serviceType : null,\r\n    restaurantUuid : null\r\n  }\r\n\r\n  componentWillUnmount(){\r\n    document.removeEventListener(\"table\", this.state.compListener);\r\n    document.removeEventListener(\"order\", this.state.compListener);\r\n   }\r\n\r\n  componentDidMount(){\r\n\r\n    var compListener = ()=>{this.updateDrawer()};\r\n    this.setState({compListener:compListener});\r\n    document.addEventListener(\"table\",compListener);    \r\n    document.addEventListener(\"order\",compListener);\r\n    this.updateDrawer();\r\n    if(this.props.user){\r\n      this.setState({serviceType:this.props.user.serviceType});\r\n      this.setState({restaurantUuid : this.props.user.uuid});\r\n    }else{\r\n      getUserInfo(this.props.token).then((response)=>{\r\n        this.props.dispatch(setUser(response));\r\n        this.setState({serviceType:response.serviceType});\r\n        this.setState({restaurantUuid : response.uuid});\r\n      });\r\n    }\r\n  }\r\n\r\n  updateDrawer = () =>{\r\n    var items =[];\r\n    var tableStatus = [];\r\n    if(this.props.user != null){\r\n      getMetrics(this.props.token).then((response)=>{\r\n        console.log(response.data);\r\n        if(response.data.orders){\r\n          if(this.props.user.serviceType == \"normal\"){             \r\n            items = [\r\n              {text:\"Done\" , item:<CheckBox style={{fontSize:90}}/>,count:response.data.orders.served},\r\n              {text : \"Waiting\" , item:<HourglassFull style={{fontSize:90}}/>,count : response.data.orders.waiting},\r\n              {text : \"Payment\" , item:<AccountBalanceWallet style={{fontSize:90}}/>,count : response.data.services.payment},\r\n              {text:\"Waiter\" , item:<Face style={{fontSize:90}}/>,count : response.data.services.waiter}];\r\n              tableStatus=[{text:\"Occupied Tables\",count:response.data.tables.occupied},\r\n              {text:\"Free Tables\",count:response.data.tables.free},\r\n              {text:\"Most Delayed Table\",count:response.data.tables.mostDelayedNo}];\r\n              this.setState({tableStatus});\r\n          }else{\r\n            items = [{text:\"Done\" , item:<CheckBox style={{fontSize:90}}/>,count:response.data.orders.served},\r\n            {text : \"Waiting\" , item:<HourglassFull style={{fontSize:90}}/>,count : response.data.orders.waiting}];\r\n          }\r\n          this.setState({items});\r\n        }\r\n      });\r\n    }else{\r\n      getUserInfo(this.props.token).then((result)=>{\r\n        \r\n        this.props.dispatch(setUser(result));\r\n        getMetrics(this.props.token).then((response)=>{\r\n          console.log(response.data);\r\n          if(response.data.orders){\r\n            if(result.serviceType == \"normal\"){             \r\n              items = [\r\n                {text:\"Done\" , item:<CheckBox style={{fontSize:90}}/>,count:response.data.orders.served},\r\n                {text : \"Waiting\" , item:<HourglassFull style={{fontSize:90}}/>,count : response.data.orders.waiting},\r\n                {text : \"Payment\" , item:<AccountBalanceWallet style={{fontSize:90}}/>,count : response.data.services.payment},\r\n                {text:\"Waiter\" , item:<Face style={{fontSize:90}}/>,count : response.data.services.waiter}];\r\n                tableStatus=[{text:\"Occupied Tables\",count:response.data.tables.occupied},\r\n                {text:\"Free Tables\",count:response.data.tables.free},\r\n                {text:\"Most Delayed Table\",count:response.data.tables.mostDelayedNo}];\r\n                this.setState({tableStatus});\r\n            }else{\r\n              items = [{text:\"Done\" , item:<CheckBox style={{fontSize:90}}/>,count:response.data.orders.served},\r\n              {text : \"Waiting\" , item:<HourglassFull style={{fontSize:90}}/>,count : response.data.orders.waiting}];\r\n            }\r\n            this.setState({items});\r\n          }\r\n        });\r\n    });\r\n\r\n    }\r\n  }\r\n\r\n  downloadQR = () =>{\r\n    const canvas = document.getElementById(`qr${this.props.user.uuid}`);\r\n    const pngUrl = canvas\r\n      .toDataURL(\"image/png\")\r\n      .replace(\"image/png\", \"image/octet-stream\");\r\n    let downloadLink = document.createElement(\"a\");\r\n    downloadLink.href = pngUrl;\r\n    downloadLink.download = \"123456.jpg\";\r\n    document.body.appendChild(downloadLink);\r\n    downloadLink.click();\r\n    document.body.removeChild(downloadLink);\r\n  }\r\n\r\n\r\n  clickhandler(item){\r\n    alert(item.text + \" : \" + item.count );\r\n    \r\n  }\r\n\r\n  handleDrawerOpen = () => {\r\n    this.setState({open:true});\r\n  };\r\n\r\n  handleDrawerClose = () => {\r\n    this.setState({open:false});\r\n  };\r\n\r\n  render() {\r\n    const { classes } = this.props;\r\n    \r\n    return (\r\n      <Drawer anchor=\"right\"variant=\"permanent\" classes={{paper:classes.paper}}>\r\n          <div className=\"Drawer\">\r\n          <List >\r\n            <ListItem>\r\n              <ListItemText style={{color:\"black\"}}>{(this.state.serviceType == \"self\")?\r\n              ( <> &nbsp;&nbsp;&nbsp;&nbsp;\r\n                <QRCode id={`qr${this.state.restaurantUuid}`} value={`${this.state.restaurantUuid}`} bgColor=\"#837032\" fgColor=\"#282c34e8\"/>\r\n                &nbsp;&nbsp;&nbsp;&nbsp;<a style={{cursor:\"pointer\"}}onClick={this.downloadQR}>Download QR</a></>\r\n                                     ):(<p style={{fontSize:15}}>\r\n                  {this.state.tableStatus.map((title)=>{return <>{`${title.text} : ${title.count}`}<hr className=\"Test4\"/></>})}\r\n                  </p>)}                \r\n                </ListItemText>\r\n            </ListItem>\r\n            <Divider classes={{root : classes.divider}}/>\r\n          {this.state.items.map((text,index) => (\r\n            <>\r\n              <ListItem key={text} onClick={()=>this.clickhandler(this.state.items[index])} classes={{root:classes.padding}}> \r\n                 <ListItemIcon  style={{color:\"#282c34e8\"}}>\r\n                  {this.state.items[index].item}\r\n                </ListItemIcon>\r\n                <ListItemText style={{color:\"black\"}}><p style={{fontSize:30,marginLeft:\"40px\"}}>{this.state.items[index].count}</p></ListItemText>\r\n              </ListItem>\r\n              <Divider classes={{root : classes.divider}}/>\r\n              </>\r\n            ))}\r\n          </List>\r\n          </div>\r\n        </Drawer>\r\n    );\r\n  \r\n  }\r\n\r\n}\r\n\r\n\r\n\r\nconst useStyles ={\r\n  list: {\r\n    width: 250\r\n  },\r\n  fullList: {\r\n    width: \"auto\"\r\n  },\r\n  paper: {\r\n    \r\n    backgroundColor: \"#c4a748d0\",\r\n    overflowX: 'hidden',\r\n    width: 200,\r\n  },\r\n  icon:{\r\n    backgroundColor:\"#282c34e8\",\r\n    \r\n  },\r\n  padding:{\r\n    justifyContent:\"center\",\r\n    },\r\n    padding2:{\r\n      justifyContent:\"center\",\r\n      \r\n    },\r\n    divider:{\r\n      backgroundColor:\"black\"\r\n    }\r\n  \r\n};\r\n\r\nconst mapStateToProps = state =>({\r\n  token : state.token,\r\n  user : state.user,\r\n  display : state.display,\r\n  displayValue : state.value\r\n})\r\n\r\nexport default connect(mapStateToProps,null)(withStyles(useStyles)(RightDrawer))","C:\\Users\\moguz\\OneDrive\\Masaüstü\\cs491repo\\projectDraft\\react\\qrder\\src\\components\\mainPanels\\OrderPanel.js",["181","182","183","184","185","186","187","188","189","190","191","192","193"],"import React from \"react\";\r\nimport { Paper, Table, TableBody, TableCell, TableContainer, TableHead, TablePagination, TableRow } from \"@material-ui/core\";\r\nimport { AccountBalanceWallet, CheckBox, DeleteForever, Face, History, HourglassFull, NotificationsActive } from \"@material-ui/icons\";\r\nimport { connect } from \"react-redux\";\r\nimport { getUserInfo, requestOrders } from \"../../requests/restaurant\";\r\nimport { setDisplayingPanel, setOrders } from \"../../redux/actions\";\r\nimport OrderCreatePanel from \"./order/OrderCreatePanel\";\r\nimport { payOrder, removeOrder } from \"../../requests/order\";\r\nimport resClient from \"../../mqtt/client\";\r\n\r\nconst moment = require('moment');\r\n\r\nclass OrderPanel extends React.Component {\r\n  state = {\r\n    info: {\r\n      OrderCount: null,\r\n      orders: [{}],\r\n    },\r\n    serviceType : \"\",\r\n    page: 0,\r\n    rowsPerPage : 10,\r\n    compListener : null\r\n  };\r\n\r\n  columns = [\r\n    {\r\n      id: \"orderNo\",\r\n      label: \"Order No\",\r\n      minWidth: 170,\r\n      align: \"left\",\r\n    },\r\n    {\r\n      id: \"time\",\r\n      label: \"Time\",\r\n      minWidth: 170,\r\n      align: \"center\",\r\n    },\r\n    {\r\n      id: \"price\",\r\n      label: \"Price\",\r\n      minWidth: 170,\r\n      align: \"center\",\r\n    },\r\n    {\r\n      id: \"status\",\r\n      label: \"Status\",\r\n      minWidth: 80,\r\n      align: \"right\",\r\n    },    \r\n    {\r\n      id: \"action\",\r\n      label: \"\",\r\n      minWidth: 80,\r\n      align: \"right\",\r\n    },\r\n  ];\r\n \r\n  \r\n  handleChangePage = (event, newPage) => {\r\n    this.setState({page:newPage});\r\n  };\r\n\r\n  handleChangeRowsPerPage = (event) => {\r\n    this.setState({rowsPerPage:+event.target.value});\r\n    this.setState({page:0});\r\n  };\r\n\r\n  serveOrder = (order) =>{\r\n    console.log(order);\r\n    //update order as paid\r\n    payOrder(this.props.token,order.uuid).then((response)=>{\r\n      console.log(response);\r\n      this.updateOrders();\r\n    });\r\n    //notify with mqtt\r\n    resClient.client.publish(`restaurant/${this.props.user.uuid}/${order.uuid}`,\"ready\");\r\n\r\n  }\r\n\r\n  showOrderDetails = (orderUuid) =>{\r\n    console.log(orderUuid);\r\n    \r\n    this.props.dispatch(setDisplayingPanel(<OrderCreatePanel updateItemUuid={orderUuid}/>));\r\n  }\r\n\r\n  removeOrder = (uuid) =>{\r\n    removeOrder(this.props.token,uuid).then((response)=>{\r\n      this.updateOrders();\r\n    });\r\n  }\r\n\r\n  updateOrders = () =>{\r\n    requestOrders(this.props.token).then((response) => {\r\n      this.props.dispatch(setOrders(response));\r\n      var temp = [];\r\n      response.map((order)=>{\r\n          temp.push({\r\n              uuid : order.uuid,\r\n              orderNo:order.no,\r\n              time : (order.status == \"waiting\")?(moment().diff(moment(order.createdAt),\"minutes\")):(\"-\"),\r\n              status : order.status ,\r\n              price : order.totalPrice,\r\n              action : <DeleteForever onClick={this.removeOrder.bind(this,order.uuid)}/>});\r\n      })\r\n      var service;\r\n        getUserInfo(this.props.token).then((result)=>{\r\n          service = result.serviceType;            \r\n          this.setState({info:{OrderCount:response.length,\r\n            orders : temp},\r\n            serviceType : service});\r\n            console.log(service == \"self\");\r\n        });\r\n      //}\r\n      \r\n    });\r\n  }\r\n\r\n  componentWillUnmount(){\r\n    document.removeEventListener(\"order\", this.state.compListener);\r\n   }\r\n\r\n  componentDidMount() {\r\n    \r\n    var compListener = ()=>{this.updateOrders()};\r\n    this.setState({compListener:compListener}); \r\n    document.addEventListener(\"order\",compListener);\r\n    this.updateOrders();\r\n  }\r\n\r\n  render() {\r\n    const {classes,rowsPerPage,page} = this.state;\r\n    const columns = this.columns;\r\n    const rows = this.state.info.orders;\r\n    const handleChangePage = this.handleChangePage.bind(this);\r\n    const handleChangeRowsPerPage = this.handleChangeRowsPerPage.bind(this);\r\n    const icons = [];\r\n    \r\n    icons[\"waiting\"] = <HourglassFull  style={{fontSize:\"40\"}}/>;\r\n    icons[\"paid\"] = <History style={{fontSize:\"40\"}}/>;\r\n    icons[\"served\"] = <CheckBox style={{fontSize:\"40\"}}/>;\r\n    //<CheckBox style={{fontSize:\"40\"}}/>,<AccountBalanceWallet style={{fontSize:\"40\"}}/>,<Face  style={{fontSize:\"40\"}}/>,<HourglassFull  style={{fontSize:\"40\"}}/>\r\n    return (\r\n      <div >\r\n        <TableContainer  className=\"Test2\">\r\n        <Table stickyHeader aria-label=\"sticky table\" >\r\n          <TableHead >\r\n            <TableRow >\r\n              {columns.map((column) => (\r\n                <TableCell\r\n                  key={column.id}\r\n                  align={column.align}\r\n                  style={{ minWidth: column.minWidth }}\r\n                  classes={{\r\n                    root:\"Chart-header-specs\"\r\n                  }}\r\n                >\r\n                  {column.label}\r\n                </TableCell>\r\n              ))}\r\n            </TableRow>\r\n          </TableHead>\r\n          <TableBody  >\r\n            {rows.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage).map((row,index) => {\r\n              return (\r\n                <TableRow hover role=\"checkbox\" tabIndex={-1} key={row.code} >\r\n                  {columns.map((column) => {\r\n                    const value = row[column.id];\r\n                    return (\r\n                      <TableCell onClick={(column.id == \"status\" || column.id == \"action\")? null :this.showOrderDetails.bind(this,row.uuid)} key={column.id} align={column.align} style={(column.id == \"status\")?(null):{cursor:\"pointer\"}} >\r\n                        <div className=\"OrderCell\" >                                                    \r\n                          {column.format && typeof value === 'number' ? column.format(value) : ((column.id == \"status\")?((this.state.serviceType == \"self\" && row.status == \"waiting\")?(<>{icons[value]}<NotificationsActive onClick={this.serveOrder.bind(this,row)} style={{fontSize:\"40\"}}/></>):(icons[value])):(value))}\r\n                  \r\n                        </div>\r\n                      </TableCell>\r\n                    );\r\n                  })}\r\n                </TableRow>\r\n              );\r\n            })}\r\n          </TableBody>\r\n        </Table>\r\n      </TableContainer>\r\n      <TablePagination\r\n      \r\n        rowsPerPageOptions={[ 10]}\r\n        component=\"div\"\r\n        count={rows.length}\r\n        rowsPerPage={rowsPerPage}\r\n        page={page}\r\n        onChangePage={handleChangePage}\r\n        onChangeRowsPerPage={handleChangeRowsPerPage}  \r\n        className=\"Test3\"      \r\n        classes={{\r\n          root:\"Chart-header-specs\"\r\n        }}\r\n      />\r\n    </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state =>({\r\n  token : state.token,\r\n  user : state.user,\r\n  orders : state.orders\r\n})\r\n\r\nexport default connect(mapStateToProps,null)(OrderPanel);\r\n\r\n","C:\\Users\\moguz\\OneDrive\\Masaüstü\\cs491repo\\projectDraft\\react\\qrder\\src\\components\\mainFrames\\RegisterPage.js",["194","195","196"],"import { Button, Switch, TextField, withStyles } from '@material-ui/core';\r\nimport React from 'react';\r\nimport { connect, useDispatch } from 'react-redux';\r\nimport { withRouter } from 'react-router-dom';\r\nimport { login, registration } from '../../requests/auth';\r\nimport {setToken, setUser} from '../../redux/actions'\r\nimport { getUserInfo } from '../../requests/restaurant';\r\nimport { AccountBox, LocationOn, Mail, Note, Phone, VpnKey } from '@material-ui/icons';\r\n\r\n\r\n\r\nclass RegisterPage extends React.Component{\r\n    \r\n    state = {\r\n        loading : false,\r\n        type : \"normal\"\r\n        \r\n    };\r\n\r\n\r\n    typeChange= () => {                                                                         //service Type switch\r\n\r\n        var s = document.getElementById(\"registerSwitch\").checked;\r\n        this.setState({type:(s)?(\"self\"):(\"normal\")})\r\n    }\r\n\r\n    register = (formVars) => {\r\n        const { history } = this.props;\r\n        this.setState({loading : true});                                                        //set loading notifier to panel\r\n        var values = [];\r\n        \r\n        //put values into DTO form\r\n        values[\"name\"]= formVars[0].id.value;                                                   //DTO object : values[]\r\n        values[\"address\"]= formVars[1].id.value;\r\n        values[\"phoneNumber\"]= formVars[2].id.value;\r\n        values[\"service\"] = this.state.type;\r\n        values[\"email\"]= formVars[3].id.value;\r\n        values[\"username\"]= formVars[4].id.value;\r\n        values[\"password\"]= formVars[5].id.value;\r\n\r\n\r\n        for (const [key, value] of Object.entries(values)) {                                    //check missing arguments\r\n            if(!value){                        \r\n                this.setState({loading : false});\r\n                alert(\"missing \" + key);        \r\n                return;\r\n            }            \r\n        }\r\n        var pattern = new RegExp(/^((\"[\\w-\\s]+\")|([\\w-]+(?:\\.[\\w-]+)*)|(\"[\\w-\\s]+\")([\\w-]+(?:\\.[\\w-]+)*))(@((?:[\\w-]+\\.)*\\w[\\w-]{0,66})\\.([a-z]{2,6}(?:\\.[a-z]{2})?)$)|(@\\[?((25[0-5]\\.|2[0-4][0-9]\\.|1[0-9]{2}\\.|[0-9]{1,2}\\.))((25[0-5]|2[0-4][0-9]|1[0-9]{2}|[0-9]{1,2})\\.){2}(25[0-5]|2[0-4][0-9]|1[0-9]{2}|[0-9]{1,2})\\]?$)/i);\r\n        if(!pattern.test(values[\"email\"])){\r\n            this.setState({loading : false});                                                   //email struct validation\r\n            alert(\"email is not valid\");        \r\n            return;\r\n        }\r\n\r\n        registration(values).then((response)=>{                                                 //registration request\r\n\r\n            if(response.status == 200){                                                         //response status code :200\r\n\r\n                login(values[\"username\"],values[\"password\"]).then((response)=>{                 //login request\r\n                    \r\n                    if(response){                                                               //if response is served\r\n\r\n                        this.props.dispatch(setToken(response.token));                          //set token from response to redux\r\n                        \r\n                        getUserInfo(this.props.token).then((result)=>{                          //user details request\r\n                            \r\n                            this.props.dispatch(setUser(result));                               //set user details from response to redux\r\n                            \r\n                            history.push(\"/mainPage\");                                          //push main page to be redirected\r\n                        \r\n                        });\r\n                    } else{\r\n                        alert(\"unable to login\");                                               //communication error\r\n                    }\r\n                               \r\n                }).catch((error)=>{\r\n                    console.log(\"error is : \" + error );\r\n                });\r\n            }else{                                                                              //error response\r\n                //todo\r\n            }      \r\n        });\r\n        this.setState({loading : false});        \r\n    }\r\n\r\n    render(){\r\n        const {classes } = this.props;\r\n\r\n        const {loading} = this.state;\r\n        \r\n        //form variables that holds input's type, label, id, reference and specified icon\r\n        var formVariables = [\r\n            {name:\"name\", id:null,label : \"Name\",type:\"text\",icon:<Note  style={{fontSize:\"50px\",color:\"black\"}}/>},\r\n            {name : \"address\",id:null,label : \"Address\",type:\"text\",icon:<LocationOn style={{fontSize:\"50px\",color:\"black\"}}/>},\r\n            {name : \"phoneNumber\",id:null,label : \"Phone Number\",type:\"tel\",icon:<Phone style={{fontSize:\"50px\",color:\"black\"}}/>},\r\n            {name : \"email\",id:null,label : \"Email\",type:\"email\",icon:<Mail style={{fontSize:\"50px\",color:\"black\"}}/>},\r\n            {name : \"username\",id:null,label : \"Username\",type:\"text\",icon:<AccountBox style={{fontSize:\"50px\",color:\"black\"}}/>},\r\n            {name : \"password\",id:null,label : \"Password\",type:\"password\",icon:<VpnKey style={{fontSize:\"50px\",color:\"black\"}}/>}];\r\n         \r\n        \r\n        return(\r\n        <div className=\"App\">\r\n          <header className=\"App-Header\">\r\n              <h1 className=\"title\">Qrder</h1>\r\n        </header>\r\n        <body className=\"App-body\">\r\n        <div className=\"RegisterMainPanel\"> \r\n          <div className=\"RegisterPanel\">\r\n            {loading ? (<div style={{color:\"black\"}}>\r\n            signing up...</div>                                                             //loading notifier for panel\r\n                ):(\r\n                     <>\r\n            {formVariables.map((index)=>(                                                   //tracing all form variables\r\n            (index.name == \"password\")?( <>&nbsp;&nbsp;                                     {/*specified texfield for password tp align image and max rows*/}\r\n                <TextField id={index.name} label = {index.label}                                \r\n                type={index.type}\r\n                inputRef={el =>index.id = el}                                               /*input reference to get form variables for registration*/\r\n                className = {classes.main}\r\n                InputProps={{\r\n                        classes:{\r\n                            input:classes.font\r\n                        }\r\n                    }}\r\n                    InputLabelProps={{\r\n                        classes:{\r\n                            root: classes.font,\r\n                        }\r\n                    }}\r\n                />{index.icon}                                                              {/*icon*/}\r\n                <br/>\r\n                <br/>\r\n                </>):( <>\r\n                <TextField id={index.name} label = {index.label}\r\n                multiline rowsmax = {4} \r\n                type={index.type}\r\n                inputRef={el =>index.id = el}                                                /*input reference to get form variables for registration*/\r\n                className = {classes.main}\r\n                InputProps={{\r\n                        classes:{\r\n                            input:classes.font\r\n                        }\r\n                    }}\r\n                    InputLabelProps={{\r\n                        classes:{\r\n                            root: classes.font,\r\n                        }\r\n                    }}\r\n                />   {index.icon}                                                              {/*icon*/}                            \r\n                <br/>\r\n                <br/>\r\n                </>)\r\n                \r\n               \r\n            ))}\r\n                <span style={{float:\"left\",color:\"#000000\"}}>                                   {/*service switch*/}   \r\n                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<Switch\r\n                        color=\"default\"                                                         /*styles*/   \r\n                        id = \"registerSwitch\"\r\n\r\n                        onChange={this.typeChange.bind(this)}                                   /*change handler*/\r\n                        />{this.state.type}                                                    {/*type display*/}\r\n                </span>\r\n                \r\n                <br/>\r\n                <br/>\r\n                 <span className=\"ButtonLayout\">\r\n                 <Button                                                                         /*register button*/\r\n                    classes={{\r\n                        root: classes.buttonRoot, \r\n                        label: classes.buttonLabel,\r\n                    }}\r\n                    onClick={this.register.bind(this,formVariables)}\r\n                >Register</Button>\r\n                </span>\r\n                <span className=\"ButtonLayout\">\r\n                <Button                                                                         /*Back button*/\r\n                    classes={{\r\n                        root: classes.buttonRoot, \r\n                        label: classes.buttonLabel,\r\n                    }}\r\n                    onClick={this.login}\r\n                >Back</Button>\r\n                </span></>\r\n                )}\r\n           \r\n          </div>\r\n          </div>\r\n        </body>\r\n        \r\n      </div>)\r\n        \r\n    }\r\n}\r\n\r\n//styles for material UI elements\r\nconst useStyles = {\r\n    main:{\r\n        '& label.Mui-focused': {\r\n            color: '#000000',\r\n          },          \r\n    '& .MuiInput-underline:after': {\r\n        borderBottomColor: '#000000',\r\n      },\r\n    },\r\n    font:{\r\n        color : \"#000000\",\r\n        '&:-webkit-autofill': {\r\n            transitionDelay: '9999s',\r\n            transitionProperty: 'background-color, color',\r\n          },\r\n    },\r\n    buttonRoot: {\r\n        background: 'linear-gradient(45deg, #282c34e8 30%, #282c34e8 90%)',\r\n        borderRadius: 3,\r\n        border: 0,\r\n        color: \"#c4a748d0\",\r\n        height: 48,\r\n        padding: '0 30px',\r\n      },\r\n    buttonLabel: {\r\n        textTransform: 'capitalize',\r\n    },\r\n}\r\n\r\n//redux state references\r\nconst mapStateToProps = state =>({\r\n    token : state.token,\r\n    user : state.user\r\n})\r\n\r\n\r\n\r\nexport default connect(mapStateToProps,null)(withRouter(withStyles(useStyles)(RegisterPage)));","C:\\Users\\moguz\\OneDrive\\Masaüstü\\cs491repo\\projectDraft\\react\\qrder\\src\\components\\mainPanels\\MenuPanel.js",["197","198","199","200","201","202","203","204","205","206","207","208","209","210","211","212","213","214"],"import React from \"react\";\r\nimport { Button, Paper, Table, TableBody, TableCell, TableContainer, TableHead, TablePagination, TableRow,  TextField,  withStyles } from \"@material-ui/core\";\r\nimport { AccountBalanceWallet, CheckBox, Edit, Face, HighlightOff, HourglassFull } from \"@material-ui/icons\";\r\nimport { connect } from \"react-redux\";\r\nimport { addSubtopic, removeItem, requestMenu, requestOrders } from \"../../requests/restaurant\";\r\nimport { setDisplayingPanel, setMenu, setOrders, setUser } from \"../../redux/actions\";\r\nimport { setRestaurantMenu } from \"../../redux/reducers\";\r\nimport ItemDetailsPanel from \"./Item/ItemDetailsPanel\";\r\nimport ItemsPanel from \"./Item/ItemsPanel\";\r\n\r\nclass MenuPanel extends React.Component {\r\n  state = {\r\n    rows : [],\r\n    info: {\r\n      OrderCount: null,\r\n      orders: [{}],\r\n    },\r\n    page: null,\r\n    rowsPerPage : 10,\r\n  };\r\n\r\n  columns = [\r\n    {\r\n        id: \"name\",\r\n        label: \"Menu\",\r\n        minWidth: 170,\r\n        align: \"center\",\r\n      }\r\n  ];\r\n\r\n /* columns = [\r\n    { id: 'name', label: 'Name', minWidth: 170 },\r\n    { id: 'code', label: 'ISO\\u00a0Code', minWidth: 100 },\r\n    {\r\n      id: 'population',\r\n      label: 'Population',\r\n      minWidth: 170,\r\n      align: 'right',\r\n      format: (value) => value.toLocaleString('en-US'),\r\n    },\r\n    {\r\n      id: 'size',\r\n      label: 'Size\\u00a0(km\\u00b2)',\r\n      minWidth: 170,\r\n      align: 'right',\r\n      format: (value) => value.toLocaleString('en-US'),\r\n    },\r\n    {\r\n      id: 'density',\r\n      label: 'Density',\r\n      minWidth: 170,\r\n      align: 'right',\r\n      format: (value) => value.toFixed(2),\r\n    },\r\n  ];\r\n*/\r\n addType = () => {\r\n  var value = document.getElementById(\"addType\").value;\r\n  addSubtopic(value,this.props.token).then((result)=>{\r\n    requestMenu(this.props.token).then((response) => {\r\n        this.props.dispatch(setMenu(response.data.menu));    \r\n    });\r\n  })\r\n }\r\n  \r\n  handleChangePage = (event, newPage) => {\r\n    this.setState({page:newPage});\r\n  };\r\n\r\n  handleChangeRowsPerPage = (event) => {\r\n    this.setState({rowsPerPage:+event.target.value});\r\n    this.setState({page:0});\r\n  };\r\n\r\n  detailsHandler = (item) => {\r\n    console.log(item);\r\n    this.props.dispatch(setDisplayingPanel(<ItemDetailsPanel item = {item}/>));\r\n  }\r\n\r\n  removeItem = (item) =>{\r\n    /*console.log(\"remove\");\r\n    console.log(item);\r\n    console.log(this.props.token);*/\r\n    removeItem(item.uuid,this.props.token).then((response)=>{\r\n      console.log(response);\r\n      requestMenu(this.props.token).then((response) => {\r\n        this.props.dispatch(setMenu(response.data));    \r\n      });\r\n    });\r\n  }\r\n\r\n  updateHandler = () =>{\r\n    var temp = [];\r\n    requestMenu(this.props.token).then((response) => {   \r\n      for (const [key, value] of Object.entries(response.data.items)) {                                    //check missing arguments\r\n        temp.push({name:key,\r\n                  Items:value});\r\n    }\r\n    this.setState({rows:temp});\r\n    this.props.dispatch(setMenu({catalog:response.data.catalog,\r\n                                  items:temp}));\r\n  });\r\n\r\n    /*\r\n    \r\n    var temp = [];\r\n    for (const [key, value] of Object.entries(this.props.menu.items)) {                                    //check missing arguments\r\n      temp.push({name:key,\r\n                Items:value});\r\n    }\r\n    \r\n    this.setState({rows:temp});*/\r\n  }\r\n\r\n\r\n\r\n  componentDidMount() {\r\n    //console.log(\"orderpanel : \" + this.props.token);\r\n\r\n    var temp = [];\r\n        \r\n      requestMenu(this.props.token).then((response) => {   \r\n          for (const [key, value] of Object.entries(response.data.items)) {                                    //check missing arguments\r\n            temp.push({name:key,\r\n                      Items:value});\r\n        }\r\n        this.setState({rows:temp});\r\n        this.props.dispatch(setMenu({catalog:response.data.catalog,\r\n                                      items:temp}));\r\n      });\r\n    \r\n    /*this.setState({info : getOrders()});\r\n    setInterval(function(){      \r\n      this.setState({info : getOrders()});\r\n    }.bind(this),10);*/\r\n  }\r\n\r\n  render() {\r\n    const {classes} = this.props;\r\n    const {rowsPerPage,page} = this.state;\r\n    const columns = this.columns;\r\n    const rows = this.state.rows;\r\n    const handleChangePage = this.handleChangePage.bind(this);\r\n    const handleChangeRowsPerPage = this.handleChangeRowsPerPage.bind(this);\r\n\r\n    return (\r\n      <div >\r\n        <TableContainer  className=\"Test2\">\r\n       \r\n        <Table stickyHeader aria-label=\"sticky table\" >\r\n          <TableHead >\r\n            <TableRow >\r\n              {columns.map((column) => (\r\n                <TableCell\r\n                  key={column.id}\r\n                  align={column.align}\r\n                  style={{ minWidth: column.minWidth }}\r\n                  classes={{\r\n                    root:\"Chart-header-specs\"\r\n                  }}\r\n                >\r\n                  {column.label}\r\n                </TableCell>\r\n              ))}\r\n            </TableRow>\r\n          </TableHead>\r\n          <TableBody  >\r\n            {rows.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage).map((row) => {\r\n              return (<>\r\n              <TableRow hover role=\"checkbox\" tabIndex={-1} key={row.code} >\r\n                   \r\n                      <TableCell align=\"center\" classes={{\r\n                          root:\"Chart-header-specs3\"\r\n                        }} >\r\n                          {row.name}\r\n                      </TableCell>\r\n                       \r\n                </TableRow>\r\n                <TableRow hover role=\"checkbox\" tabIndex={-1} key={row.code} >\r\n                  {columns.map((column) => {\r\n                    const value = row[column.id];\r\n                    return (<>                     \r\n                      <ItemsPanel items = {row.Items} type={row} update={this.updateHandler}/>\r\n                      </>\r\n                    );\r\n                  })}\r\n                </TableRow>\r\n              </>);\r\n            })}\r\n          </TableBody>\r\n        </Table>\r\n      </TableContainer>\r\n    </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst useStyles = {\r\n  main:{\r\n      '& label.Mui-focused': {\r\n          color: '#c4a748d0',\r\n        },          \r\n  '& .MuiInput-underline:after': {\r\n      borderBottomColor: '#c4a748d0',\r\n    },\r\n  },\r\n  font:{\r\n      color : \"#c4a748d0\",\r\n      '&:-webkit-autofill': {\r\n          transitionDelay: '9999s',\r\n          transitionProperty: 'background-color, color',\r\n        },\r\n  },\r\n  buttonRoot: {\r\n      background: 'linear-gradient(45deg, #c4a748d0 30%, #c4a748d0 90%)',\r\n      borderRadius: 3,\r\n      border: 0,\r\n      color: 'black',\r\n      height: 48,\r\n      padding: '0 30px',\r\n    },\r\n  buttonLabel: {\r\n      textTransform: 'capitalize',\r\n  },\r\n}\r\n\r\nconst mapStateToProps = state =>({\r\n  token : state.token,\r\n  user : state.user,\r\n  menu : state.menu,\r\n  order : state.test,\r\n  display : state.display\r\n})\r\n\r\nexport default connect(mapStateToProps,null)(withStyles(useStyles)(MenuPanel));\r\n\r\n","C:\\Users\\moguz\\OneDrive\\Masaüstü\\cs491repo\\projectDraft\\react\\qrder\\src\\components\\mainPanels\\Item\\ItemPanel.js",["215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232","233","234","235","236","237","238","239"],"import React from \"react\";\r\nimport { Button, Grid, Paper, Table, TableBody, TableCell, TableContainer, TableHead, TablePagination, TableRow, TextField, withStyles } from \"@material-ui/core\";\r\nimport { AccountBalanceWallet, AddCircle, Bookmark, CheckBox,  CheckSharp,  Face, Fastfood, HighlightOff, HourglassFull, LocalOffer, Note } from \"@material-ui/icons\";\r\nimport { connect } from \"react-redux\";\r\nimport { addItem, requestMenu, requestOrders, UpdateItem } from \"../../../requests/restaurant\";\r\nimport MenuPanel from \"../MenuPanel\";\r\nimport { setDisplayingPanel, setMenu } from \"../../../redux/actions\";\r\n\r\nclass ItemPanel extends React.Component {\r\n\r\n    state = {\r\n        loading : false,\r\n        item : {},\r\n        formVariables : [],\r\n        img : null,\r\n        preview:{\r\n            type:0,\r\n            name : 0,\r\n            price : 0,\r\n            desc : 0,\r\n            options : [],\r\n        },\r\n        catalog : []\r\n    };\r\n\r\n    add = (formVars)=> {\r\n            var values = [];\r\n            formVars[1].reference = document.getElementById(\"types\");            \r\n            values[\"name\"]= formVars[2].reference.value;\r\n            values[\"desc\"]= formVars[4].reference.value;\r\n            values[\"type\"] = formVars[1].reference.value;\r\n            values[\"options\"]= this.state.preview.options;\r\n            values[\"price\"]= formVars[3].reference.value;\r\n            values[\"img\"]= formVars[0].reference.value;            \r\n               console.log(values); \r\n               console.log(this.state.item);        \r\n           if(this.props.item){\r\n                //console.log(this.state.item);\r\n\r\n                UpdateItem(values,this.props.token,this.state.item.uuid).then((response)=>{\r\n                    console.log(response);                    \r\n                    this.props.dispatch(setDisplayingPanel(<MenuPanel/>));\r\n                });\r\n            }else{\r\n                addItem(values,this.props.token).then((response)=>{\r\n                    console.log(response);\r\n                    this.props.dispatch(setDisplayingPanel(<MenuPanel/>));\r\n                });\r\n\r\n            }\r\n            /**/\r\n\r\n    }\r\n\r\n    updateView = () =>{\r\n        var formVariables = [\r\n            {id:\"img\",label : \"Image(URL)\",type:\"text\",reference : null,default: null},\r\n            {id:\"type\",label : \"type\",type:\"select\",reference : null,default: null},\r\n            {id:\"name\",label : \"Name\",type:\"text\",reference : null,default: null},\r\n            {id:\"price\",label : \"Price\",type:\"text\",reference : null,default: null},\r\n            {id:\"desc\",label : \"Description\",type:\"text\",reference : null,default: null},\r\n            {id:\"options\",label : \"Optionals\",type:\"text\",reference : null,default: null}\r\n        ];\r\n        \r\n        if(this.props.item){            \r\n            console.log(\"hey1\");\r\n            console.log(this.props.item);\r\n            this.setState({item : this.props.item})\r\n            var tempPrev = {                \r\n                type:0,\r\n                name : 0,\r\n                price : 0,\r\n                desc : 0,\r\n                options : [],\r\n            }\r\n            formVariables.map((index)=>{\r\n                index.default = this.props.item[index.id];\r\n                if(tempPrev[index.id] == 0){                    \r\n                    console.log(\"index : \" + index.id + \" : \" + this.state.preview[index.id]);\r\n                    console.log(\"here\");\r\n                    console.log({preview:{[index.id]:this.props.item[index.id]}});\r\n                    tempPrev[index.id] =  this.props.item[index.id];\r\n                }\r\n            });\r\n            var temp = [];\r\n            if(this.props.item.options){\r\n                this.props.item.options.split(\";\").map((option)=>{\r\n                temp.push(option);\r\n                });\r\n            }\r\n            tempPrev.options = temp;            \r\n            this.setState({preview:tempPrev});\r\n            this.setState({img:this.props.item.img})\r\n        }else{\r\n            this.setState({\r\n                loading : false,\r\n                item : {},\r\n                formVariables : [],\r\n                img : null,\r\n                preview:{\r\n                    type:0,\r\n                    name : 0,\r\n                    price : 0,\r\n                    desc : 0,\r\n                    options : [],\r\n                },\r\n                catalog : []\r\n            })\r\n        }\r\n        if(this.props.menu.catalog){\r\n            this.setState({catalog:this.props.menu.catalog})\r\n        }else{\r\n            var temp = [];\r\n            requestMenu(this.props.token).then((response) => {   \r\n                for (const [key, value] of Object.entries(response.data.items)) {                                    //check missing arguments\r\n                  temp.push({name:key,\r\n                            Items:value});\r\n              }\r\n              this.setState({rows:temp});\r\n              this.props.dispatch(setMenu({catalog:response.data.catalog,\r\n                                            items:temp}));\r\n              \r\n              this.setState({catalog:response.data.catalog})\r\n            });\r\n        }\r\n        this.setState({formVariables});\r\n    }\r\n    componentDidMount() {\r\n       this.updateView();\r\n    }\r\n\r\n    imageRender = () =>{\r\n        console.log(this.state.formVariables[0].reference.value);\r\n        this.setState({img:this.state.formVariables[0].reference.value});\r\n    }\r\n\r\n    typeRender = () =>{\r\n        \r\n        var temp = this.state;\r\n        temp.preview.type = document.getElementById(\"types\").value;\r\n        console.log(temp);\r\n        this.setState(temp); \r\n    }\r\n\r\n    addMetadata = () =>{\r\n        var temp = this.state;\r\n        console.log(temp);\r\n        temp.preview.options.push(document.getElementById(\"options\").value);\r\n        document.getElementById(\"options\").value = \"\";\r\n        console.log(temp);\r\n        this.setState(temp);\r\n    }\r\n\r\n    removeOption = (ingredient) =>{\r\n        \r\n        var temp = this.state;\r\n        temp.preview.options.splice(temp.preview.options.indexOf(ingredient),1);\r\n        this.setState(temp);\r\n    }\r\n\r\n    changeHandler = (contentId) =>{\r\n        \r\n        var temp = this.state;\r\n        var value = document.getElementById(contentId).value;\r\n        switch (contentId){\r\n            case \"name\":\r\n                temp.preview.name = value;\r\n                break;\r\n            case \"price\":\r\n                temp.preview.price = value;\r\n                break;\r\n            case \"desc\":\r\n                temp.preview.desc = value;\r\n                break;\r\n        }\r\n        this.setState(temp);\r\n    }\r\n\r\n    render() {\r\n        const {classes} = this.props;\r\n        console.log(this.state.formVariables);\r\n\r\n        var formVariables = this.state.formVariables;\r\n\r\n            formVariables.map((index)=>{index.default = this.state.item[index.id]});\r\n            var test = \"test\";\r\n        return (\r\n            <>\r\n            <Grid container spacing={1}>\r\n                    <Grid item xs={6} className=\"GridElement\">\r\n                            <Grid container spacing={1}>\r\n                                \r\n                                <Grid item xs={12} className=\"GridElement\">\r\n                                    <div className=\"BigImage\">\r\n                                        <img  src={this.state.img} width =\"60%\" height =\"100%\"/>                                        \r\n                                    </div>\r\n                                </Grid>\r\n                                <Grid item xs={12} className=\"GridElement\">\r\n                                    <div className=\"BigTag4\"> \r\n                                        <div style={{textAlign:\"left\",minWidth:\"100%\",fontSize:\"15px\"}}>\r\n                                        <Fastfood/>{this.state.preview.name}\r\n                                    \r\n                                            <span style={{float:\"right\"}}>\r\n                                                &nbsp;&nbsp;&nbsp;&nbsp;{this.state.preview.type}<Bookmark/>\r\n                                            </span> \r\n                                            <hr/>\r\n                                            <Note/>{this.state.preview.desc}\r\n                                            <br/>\r\n                                            <br/> \r\n                                            Optionals:\r\n                                            <br/>              \r\n                                        {this.state.preview.options.map((ingredient)=>(\r\n                                            <>\r\n                                            <CheckSharp/>{ingredient} <HighlightOff style={{fontSize:\"12px\"}} onClick={this.removeOption.bind(this,ingredient)}/>\r\n                                            <br/>\r\n                                            </>\r\n                                        ))}  \r\n                                        <hr/>  \r\n                                        <div style={{textAlign:\"center\"}}>\r\n                                        <LocalOffer/>Price : {this.state.preview.price} TL\r\n                                        </div>                             \r\n                                        </div>                                \r\n                                    </div>\r\n                                </Grid>\r\n                                <Grid item xs={12} className=\"GridElement\">                                   \r\n                                    <span className=\"ButtonLayout\">\r\n                                    <Button\r\n                                        classes={{\r\n                                            root: classes.buttonRoot, // class name, e.g. `classes-nesting-root-x`\r\n                                            label: classes.buttonLabel, // class name, e.g. `classes-nesting-label-x`\r\n                                        }}\r\n                                        onClick={this.add.bind(this,formVariables)}\r\n                                    >{(this.props.item) ? (<>Update</>):(<>Add</>)}</Button>\r\n                                    </span>\r\n                                </Grid>\r\n                            </Grid>\r\n                            \r\n                    </Grid>\r\n                    <Grid item xs={6} className=\"GridElement\">\r\n                            <div style={{textAlign:\"left\"}}>\r\n                            {formVariables.map((index)=>(\r\n                                (index.id == \"type\")?(<>\r\n                                <div className=\"SelectLabel\">Type</div> \r\n                                <input id=\"types\" autoComplete=\"off\" className=\"Select\" type=\"text\" list=\"typelist\" onChange={this.typeRender} defaultValue={index.default}/>\r\n                                <datalist id=\"typelist\" className=\"Select\">\r\n                                    {this.state.catalog.map((type)=>(\r\n                                    <option id = {type.uuid} value={type} className=\"Option\">{type}</option>))}\r\n                                </datalist> \r\n                                <br/>\r\n                                <br/>\r\n                                </>):(<>\r\n                                    <TextField id={index.id} label = {index.label} \r\n                                    \r\n                                    type={index.type}\r\n                                    inputRef={el =>index.reference = el} \r\n                                    className = {classes.main}\r\n                                    defaultValue = {index.default}\r\n                                    onChange = {(index.id == \"img\") ? (this.imageRender):((index.id == \"options\")?(null):(this.changeHandler.bind(this,index.id)))}\r\n                                    InputProps={{\r\n                                            classes:{\r\n                                                input:classes.font\r\n                                            }\r\n                                        }}\r\n                                        InputLabelProps={{\r\n                                            classes:{\r\n                                                root: classes.font,\r\n                                            }\r\n                                        }}\r\n                                    />   {(index.id == \"options\")?(<AddCircle style={{paddingTop:\"20px\"}} onClick={this.addMetadata} />):(null)}                          \r\n                                    <br/>\r\n                                    <br/>\r\n                                    </>)\r\n                                \r\n                            ))}\r\n                            </div>                      \r\n                    </Grid>\r\n                </Grid>\r\n           \r\n                </>\r\n        );\r\n    }\r\n}\r\n\r\nconst useStyles = {\r\n    main:{\r\n        '& label.Mui-focused': {\r\n            color: '#c4a748d0',\r\n          },          \r\n    '& .MuiInput-underline:after': {\r\n        borderBottomColor: '#c4a748d0',\r\n      },\r\n    },\r\n    font:{\r\n        color : \"#c4a748d0\",\r\n        '&:-webkit-autofill': {\r\n            transitionDelay: '9999s',\r\n            transitionProperty: 'background-color, color',\r\n          },\r\n    },\r\n    buttonRoot: {\r\n        background: 'linear-gradient(45deg, #c4a748d0 30%, #c4a748d0 90%)',\r\n        borderRadius: 3,\r\n        border: 0,\r\n        color: 'black',\r\n        height: 48,\r\n        padding: '0 30px',\r\n      },\r\n    buttonLabel: {\r\n        textTransform: 'capitalize',\r\n    },\r\n}\r\n\r\n\r\nconst mapStateToProps = state =>({\r\n  token : state.token,\r\n  user : state.user,\r\n  menu : state.menu,\r\n  order : state.test,\r\n  display : state.display\r\n})\r\n\r\nexport default connect(mapStateToProps,null)(withStyles(useStyles)(ItemPanel));\r\n\r\n","C:\\Users\\moguz\\OneDrive\\Masaüstü\\cs491repo\\projectDraft\\react\\qrder\\src\\components\\mainPanels\\Item\\ItemDetailsPanel.js",["240"],"import React from \"react\";\r\nimport {  Button, Grid, withStyles } from \"@material-ui/core\";\r\nimport { connect } from \"react-redux\";\r\nimport { Bookmark, CheckSharp, Edit, Fastfood, LocalOffer, Note } from \"@material-ui/icons\";\r\nimport ItemPanel from \"./ItemPanel\";\r\nimport { setDisplayingPanel } from \"../../../redux/actions\";\r\n\r\nclass ItemDetailsPanel extends React.Component {\r\n\r\n    state = {\r\n        item : {},\r\n        ingredients : [],\r\n        loading : false\r\n    };\r\n    componentDidMount() {\r\n        console.log(this.props.item);\r\n        this.setState({item : this.props.item});  \r\n        if(this.props.item.options){            \r\n            var temp = this.props.item.options.split(\";\");\r\n        }      \r\n        this.setState({ingredients : temp});\r\n        \r\n    }\r\n    editItem = () =>{\r\n        this.props.dispatch(setDisplayingPanel(<ItemPanel id=\"itemPanelUpdate\" item = {this.state.item}/>));\r\n    }\r\n    /*<Button\r\n        classes={{\r\n            root: classes.buttonRoot, // class name, e.g. `classes-nesting-root-x`\r\n            label: classes.buttonLabel, // class name, e.g. `classes-nesting-label-x`\r\n        }}\r\n    >Edit</Button>*/\r\n\r\n    render() {\r\n        const {classes} = this.props;\r\n        \r\n        return (\r\n            <>\r\n                 <Grid container spacing={1}>\r\n                    <Grid item xs={6} className=\"GridElement\">\r\n                            <Grid container spacing={1}>\r\n                                \r\n                                <Grid item xs={12} className=\"GridElement\">\r\n                                    <div className=\"BigImage\">\r\n                                        <img alt={this.state.item.img} src={this.state.item.img} width =\"60%\" height =\"100%\"/>\r\n                                        \r\n                                    </div>\r\n                                </Grid>\r\n                                <Grid item xs={12} className=\"GridElement\">\r\n                                    <Button\r\n                                        classes={{\r\n                                            root: classes.buttonRoot, // class name, e.g. `classes-nesting-root-x`\r\n                                            label: classes.buttonLabel, // class name, e.g. `classes-nesting-label-x`\r\n                                        }}\r\n                                        onClick = {this.editItem}\r\n                                    ><Edit/>  Edit</Button>\r\n                                </Grid>\r\n                            </Grid>\r\n                            \r\n                    </Grid>\r\n                    <Grid item xs={6} className=\"GridElement\">\r\n                        <div className=\"BigTag\">\r\n                            <div style={{textAlign:\"left\",fontSize:\"15px\"}}>\r\n                                <Fastfood/>{this.state.item.name}\r\n                                \r\n                                <span style={{float:\"right\"}}>\r\n                                    &nbsp;&nbsp;&nbsp;&nbsp;{this.props.type.name}<Bookmark/>\r\n                                    </span> \r\n                                <hr/>\r\n                                <Note/>{this.state.item.desc}\r\n                                <br/>\r\n                                <br/> \r\n                                Ingredients:\r\n                                <br/>                           \r\n                                {(this.props.item.options)?(this.state.ingredients.slice().map((ingredient)=>(<><CheckSharp/>{ingredient}<br/></>))):(<></>)}\r\n                                <hr/>\r\n                                <div style={{textAlign:\"center\"}}>\r\n                                <LocalOffer/>{this.state.item.price}TL\r\n                                </div>\r\n                            </div>\r\n                        </div>                            \r\n                    </Grid>\r\n                </Grid>\r\n                \r\n                </>\r\n        );\r\n    }\r\n}\r\n\r\nconst useStyles = {\r\n    \r\n    buttonRoot: {\r\n        background: 'linear-gradient(45deg, #c4a748d0 30%, #c4a748d0 90%)',\r\n        borderRadius: 3,\r\n        border: 0,\r\n        color: 'black',\r\n        height: 48,\r\n        width: \"200px\",\r\n        height : \"75px\",\r\n        padding: '0 30px',\r\n      },\r\n    buttonLabel: {\r\n        \r\n        fontSize: \"30px\",\r\n        textTransform: 'capitalize',\r\n    },\r\n\r\n}\r\n\r\n\r\nconst mapStateToProps = state =>({\r\n  token : state.token,\r\n  user : state.user,\r\n  menu : state.menu,\r\n  order : state.test,\r\n  display : state.display\r\n})\r\n\r\nexport default connect(mapStateToProps,null)(withStyles(useStyles)(ItemDetailsPanel));\r\n\r\n","C:\\Users\\moguz\\OneDrive\\Masaüstü\\cs491repo\\projectDraft\\react\\qrder\\src\\components\\mainPanels\\order\\OrderCreatePanel.js",["241","242","243","244","245","246","247","248","249","250","251","252","253","254","255","256","257","258","259","260","261","262","263","264","265","266","267","268","269","270","271","272","273","274","275","276","277","278","279"],"import React from \"react\";\r\nimport { Button, Grid, Paper, Table, TableBody, TableCell, TableContainer, TableHead, TablePagination, TableRow, withStyles } from \"@material-ui/core\";\r\nimport { AccountBalanceWallet, AddCircle, CheckBox, Edit, Face, HourglassFull } from \"@material-ui/icons\";\r\nimport { connect } from \"react-redux\";\r\nimport { setDisplayingPanel, setMenu, setTables } from \"../../../redux/actions\";\r\nimport ItemDetailsPanel from \"../Item/ItemDetailsPanel\";\r\nimport { getTablesRequest, requestMenu } from \"../../../requests/restaurant\";\r\nimport MiniItemPanel from \"../Item/MiniItemPanel\";\r\nimport { addOrder, getSpecificOrder, removeOrder } from \"../../../requests/order\";\r\nimport OrderPanel from \"../OrderPanel\";\r\n\r\nclass OrderCreatePanel extends React.Component {\r\n  state = {\r\n    order : {\r\n        items : [],\r\n        totalPrice : 0,\r\n    },\r\n    menu : [],\r\n    page: null,\r\n    rowsPerPage : 10,\r\n  };\r\n\r\n  columns = [\r\n    \r\n    {\r\n        id: \"name\",\r\n        label: \"Menu\",\r\n        minWidth: 200,\r\n        align: \"Center\",\r\n      }\r\n  ];\r\n \r\n  \r\n  handleChangePage = (event, newPage) => {\r\n    this.setState({page:newPage});\r\n  };\r\n\r\n  handleChangeRowsPerPage = (event) => {\r\n    this.setState({rowsPerPage:+event.target.value});\r\n    this.setState({page:0});\r\n  };\r\n\r\n /* addItemToOrderHandler = (item) => {\r\n    var items = this.state.order.items;\r\n    items.push(item);   \r\n    var order = {items : items,\r\n                totalPrice : this.state.order.totalPrice + item.price};\r\n    this.setState({order : order});\r\n  }*/\r\n\r\n  addItemToOrderHandler = (item) => {\r\n    var items = this.state.order.items;\r\n    if(items.find(element => element.uuid == item.uuid)){\r\n      items.find(element => element.uuid == item.uuid).quantity++;      \r\n      items.find(element => element.uuid == item.uuid).price +=item.price;\r\n      if(items.find(element => element.uuid == item.uuid).quantity < 3){\r\n        items.find(element => element.uuid == item.uuid).name +=\"x2\";\r\n      }else{                \r\n        var tempString = items.find(element => element.uuid == item.uuid).name.substr(0,items.find(element => element.uuid == item.uuid).name.length-1);\r\n        items.find(element => element.uuid == item.uuid).name= tempString;\r\n        items.find(element => element.uuid == item.uuid).name += items.find(element => element.uuid == item.uuid).quantity;\r\n      }\r\n    }else{      \r\n      var tempItem = {name:item.name,price : item.price,uuid : item.uuid,options:item.options,quantity:1};\r\n      items.push(tempItem);  \r\n    } \r\n    var order = {items : items,\r\n                totalPrice : this.state.order.totalPrice + item.price};\r\n    this.setState({order : order});\r\n  }\r\n\r\n  test = () =>{\r\n    \r\n  }\r\n\r\n  updateItem = () =>{\r\n    alert(\"update item + \" + this.props.updateItemUuid);\r\n  }\r\n\r\n\r\n  addItem = () =>{\r\n    \r\n    var requestOrder;\r\n    if(this.props.user.serviceType == \"normal\"){\r\n      requestOrder = {\r\n        restaurantUuid : this.props.user.uuid,\r\n        tableUuid : document.getElementById(\"tables\").value,\r\n        items : []\r\n      }\r\n    }else if(this.props.user.serviceType == \"self\"){\r\n      requestOrder = {\r\n        restaurantUuid : this.props.user.uuid,\r\n        items : []\r\n      }\r\n      \r\n    }\r\n    \r\n   \r\n    this.state.order.items.map((item)=>{\r\n      var tempOptions = [];\r\n      if(item.options){\r\n        item.options.split(\";\").map((opt)=>{\r\n          tempOptions.push(opt);\r\n        });\r\n      }\r\n      requestOrder.items.push({uuid:item.uuid,options:tempOptions,quantity:item.quantity});\r\n    });\r\n    console.log(requestOrder);\r\n    addOrder(this.props.token,requestOrder).then((response)=>{\r\n      console.log(response);      \r\n      const event = new Event('order'); \r\n      document.dispatchEvent(event);\r\n      this.props.dispatch(setDisplayingPanel(<OrderPanel/>));\r\n    });\r\n  }\r\n\r\n  removeOrder = () =>{\r\n    removeOrder(this.props.token,this.props.updateItemUuid).then((response)=>{   \r\n      console.log(response);   \r\n      this.props.dispatch(setDisplayingPanel(<OrderPanel/>));\r\n    });\r\n  }\r\n\r\n\r\n\r\n  componentDidMount() {\r\n    if(this.props.tableUuid){      \r\n      document.getElementById(\"tables\").value = this.props.tableUuid;\r\n    }\r\n\r\n    if(this.props.updateItemUuid){\r\n      getSpecificOrder(this.props.token,this.props.updateItemUuid).then((result)=>{\r\n        var items = [];\r\n        var price = 0;\r\n        result.Items.map((item)=>{\r\n          for(var i = 0 ; i <item.OrderItems.quantity; i++){\r\n            if(items.find(element => element.uuid == item.uuid)){\r\n              items.find(element => element.uuid == item.uuid).quantity++;      \r\n              items.find(element => element.uuid == item.uuid).price +=item.price;\r\n              if(items.find(element => element.uuid == item.uuid).quantity < 3){\r\n                items.find(element => element.uuid == item.uuid).name +=\"x2\";\r\n              }else{                \r\n                var tempString = items.find(element => element.uuid == item.uuid).name.substr(0,items.find(element => element.uuid == item.uuid).name.length-1);\r\n                items.find(element => element.uuid == item.uuid).name= tempString;\r\n                items.find(element => element.uuid == item.uuid).name += items.find(element => element.uuid == item.uuid).quantity;\r\n              }\r\n            }else{      \r\n              var tempItem = {name:item.name,price : item.price,uuid : item.uuid,options:item.options,quantity:1};\r\n              items.push(tempItem);  \r\n            }\r\n            price += item.price; \r\n          }\r\n        });        \r\n        var order = {items : items,\r\n                    totalPrice : price};\r\n        this.setState({order : order});\r\n      });\r\n    }\r\n    if(this.props.tables.length == 0){\r\n      \r\n      getTablesRequest(this.props.token).then((response)=>{\r\n        this.props.dispatch(setTables(response.data));\r\n      });\r\n\r\n    };\r\n      var temp = [];\r\n      requestMenu(this.props.token).then((response) => {\r\n        for (const [key, value] of Object.entries(response.data.items)) {                                    //check missing arguments\r\n          temp.push({name:key,\r\n                    Items:value});\r\n      }\r\n      this.setState({menu:temp});\r\n      this.props.dispatch(setMenu({catalog:response.data.catalog,\r\n                                    items:temp}));   \r\n      });\r\n      \r\n    \r\n    /*this.setState({info : getOrders()});\r\n    setInterval(function(){      \r\n      this.setState({info : getOrders()});\r\n    }.bind(this),10);*/\r\n  }\r\n\r\n  render() {\r\n    const {classes} = this.props;\r\n    const {rowsPerPage,page} = this.state;\r\n    const columns = this.columns;\r\n    const rows = this.state.menu;\r\n    const handleChangePage = this.handleChangePage.bind(this);\r\n    const handleChangeRowsPerPage = this.handleChangeRowsPerPage.bind(this);\r\n/**/\r\n    return (\r\n          \r\n          <Grid container spacing={1}>\r\n                    <Grid item xs={6} className=\"GridElement\">\r\n                            <Grid container spacing={1}>\r\n                                \r\n                                <Grid item xs={12} className=\"GridElement\">\r\n                                <div className=\"BigTag\" onClick = {this.test}>\r\n                                        Order\r\n                                    </div>\r\n                                </Grid>\r\n                                <Grid item xs={12} className=\"GridElement\" style={{maxHeight:\"390px\"}}>\r\n                                    <TableContainer  className=\"BigMenu2\">\r\n                                      <Table stickyHeader aria-label=\"sticky table\" >\r\n                                        <TableHead >\r\n                                          <TableRow >\r\n                                            {columns.map((column) => (\r\n                                              <TableCell\r\n                                                key={column.id}\r\n                                                align={column.align}\r\n                                                style={{ minWidth: column.minWidth }}\r\n                                                classes={{\r\n                                                  root:\"Chart-header-specs\"\r\n                                                }}\r\n                                              >\r\n                                                {column.label}\r\n                                              </TableCell>\r\n                                            ))}\r\n                                          </TableRow>\r\n                                        </TableHead>\r\n                                        <TableBody  >\r\n                                          {rows.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage).map((row) => {\r\n                                            return (<>\r\n                                            <TableRow hover role=\"checkbox\" tabIndex={-1} key={row.code} >\r\n                                                \r\n                                                    <TableCell align=\"center\" classes={{\r\n                                                        root:\"Chart-header-specs3\"\r\n                                                      }} >\r\n                                                        {row.name}\r\n                                                    </TableCell>\r\n                                                    \r\n                                              </TableRow>\r\n                                              <TableRow hover role=\"checkbox\" tabIndex={-1} key={row.code} >\r\n                                                {columns.map((column) => {\r\n                                                  const value = row[column.id];\r\n                                                  return (<>                     \r\n                                                    <MiniItemPanel items = {row.Items} addHandler = {this.addItemToOrderHandler}/>\r\n                                                    </>\r\n                                                  );\r\n                                                })}\r\n                                              </TableRow>\r\n                                            </>);\r\n                                          })}\r\n                                        </TableBody>\r\n                                      </Table>\r\n                                    </TableContainer>\r\n                                </Grid>\r\n                            </Grid>\r\n                            \r\n                    </Grid>\r\n                    <Grid item xs={6} className=\"GridElement\">\r\n                      <Grid container spacing={1}>\r\n                        <Grid item xs={12} className=\"GridElement\">\r\n                          <div className=\"BigTag2\">\r\n                              <div style={{textAlign:\"left\",fontSize:\"20px\"}}>\r\n                                  {this.state.order.items.map((item) =>(\r\n                                  <>{item.name}\r\n                                      <span style={{float:\"right\"}}>\r\n                                      &nbsp;&nbsp;&nbsp;&nbsp;{item.price}\r\n                                      </span><br/></>))}\r\n                                  <hr/>\r\n                                  <div style={{textAlign:\"right\"}}>\r\n                                    Price :  {this.state.order.totalPrice}\r\n                                  </div>\r\n                              </div>\r\n                          </div>\r\n                          </Grid> \r\n                                           \r\n                          <Grid item xs={12} className=\"GridElement\">                            \r\n                            \r\n                              {this.props.user == null ? (null):(this.props.user.serviceType == \"normal\" ? (<div className=\"BigTag3\"><select name=\"tables\" id=\"tables\" className=\"Select2\">\r\n                                      {this.props.tables.map((table)=>(\r\n                                  <option value={table.uuid} className=\"Option\">{table.name}</option>))}\r\n                                </select><br/></div>):(null))}\r\n                              \r\n                          </Grid>\r\n                          <Grid item xs={12} className=\"GridElement\">        \r\n                                        {(this.props.updateItemUuid)?(<>\r\n                                          <Button\r\n                                            classes={{\r\n                                                root: classes.buttonRoot, // class name, e.g. `classes-nesting-root-x`\r\n                                                label: classes.buttonLabel, // class name, e.g. `classes-nesting-label-x`\r\n                                            }}\r\n                                            onClick={this.updateItem}\r\n                                          >Update</Button>&nbsp;\r\n                                          <Button\r\n                                            classes={{\r\n                                                root: classes.buttonRoot, // class name, e.g. `classes-nesting-root-x`\r\n                                                label: classes.buttonLabel, // class name, e.g. `classes-nesting-label-x`\r\n                                            }}\r\n                                            onClick = {this.removeOrder}\r\n                                        >Remove</Button>\r\n                                    </>):(<Button\r\n                                            classes={{\r\n                                                root: classes.buttonRoot, // class name, e.g. `classes-nesting-root-x`\r\n                                                label: classes.buttonLabel, // class name, e.g. `classes-nesting-label-x`\r\n                                            }}\r\n                                        onClick={this.addItem}\r\n                                        >Done</Button>)}\r\n                                       \r\n                              </Grid>\r\n                        </Grid>                           \r\n                    </Grid>\r\n                </Grid>\r\n       \r\n    );\r\n  }\r\n}\r\n\r\nconst useStyles = {\r\n  main:{\r\n      '& label.Mui-focused': {\r\n          color: '#c4a748d0',\r\n        },          \r\n  '& .MuiInput-underline:after': {\r\n      borderBottomColor: '#c4a748d0',\r\n    },\r\n  },\r\n  font:{\r\n      color : \"#c4a748d0\",\r\n      '&:-webkit-autofill': {\r\n          transitionDelay: '9999s',\r\n          transitionProperty: 'background-color, color',\r\n        },\r\n  },\r\n  buttonRoot: {\r\n      background: 'linear-gradient(45deg, #c4a748d0 30%, #c4a748d0 90%)',\r\n      borderRadius: 3,\r\n      border: 0,\r\n      color: 'black',\r\n      height: 48,\r\n      padding: '0 30px',\r\n    },\r\n  buttonLabel: {\r\n      textTransform: 'capitalize',\r\n  },\r\n}\r\n\r\nconst mapStateToProps = state =>({\r\n  token : state.token,\r\n  user : state.user,\r\n  menu : state.menu,\r\n  order : state.test,\r\n  tables : state.tables,\r\n  display : state.display\r\n});\r\n\r\n\r\nexport default connect(mapStateToProps,null)(withStyles(useStyles)(OrderCreatePanel));\r\n\r\n","C:\\Users\\moguz\\OneDrive\\Masaüstü\\cs491repo\\projectDraft\\react\\qrder\\src\\components\\mainPanels\\Item\\ItemsPanel.js",["280","281","282","283","284","285","286","287","288","289","290","291","292","293"],"import React from \"react\";\r\nimport { Paper, Table, TableBody, TableCell, TableContainer, TableHead, TablePagination, TableRow } from \"@material-ui/core\";\r\nimport { AccountBalanceWallet, Block, CheckBox, CheckCircle, CheckCircleOutline, Edit, Face, HighlightOff, HourglassFull } from \"@material-ui/icons\";\r\nimport { connect } from \"react-redux\";\r\nimport { setDisplayingPanel, setMenu } from \"../../../redux/actions\";\r\nimport ItemDetailsPanel from \"./ItemDetailsPanel\";\r\nimport { changeItemStatus, removeItem, requestMenu } from \"../../../requests/restaurant\";\r\n\r\nclass ItemsPanel extends React.Component {\r\n  state = {\r\n    info: {\r\n      OrderCount: null,\r\n      orders: [{}],\r\n    },\r\n    page: null,\r\n    rowsPerPage : 10,\r\n  };\r\n\r\n  columns = [\r\n    \r\n    {\r\n      id: \"image\",\r\n      label: \"Image\",\r\n      minWidth: 170,\r\n      align: \"left\"\r\n    },\r\n    {\r\n        id: \"name\",\r\n        label: \"Name\",\r\n        minWidth: 170,\r\n        align: \"left\",\r\n      },\r\n    {\r\n      id: \"price\",\r\n      label: \"Price\",\r\n      minWidth: 170,\r\n      align: \"center\",\r\n    }\r\n    ,\r\n    {\r\n      id: \"buttons\",\r\n      label: \"\",\r\n      minWidth: 30,\r\n      align: \"center\",\r\n    }\r\n  ];\r\n\r\n /* columns = [\r\n    { id: 'name', label: 'Name', minWidth: 170 },\r\n    { id: 'code', label: 'ISO\\u00a0Code', minWidth: 100 },\r\n    {\r\n      id: 'population',\r\n      label: 'Population',\r\n      minWidth: 170,\r\n      align: 'right',\r\n      format: (value) => value.toLocaleString('en-US'),\r\n    },\r\n    {\r\n      id: 'size',\r\n      label: 'Size\\u00a0(km\\u00b2)',\r\n      minWidth: 170,\r\n      align: 'right',\r\n      format: (value) => value.toLocaleString('en-US'),\r\n    },\r\n    {\r\n      id: 'density',\r\n      label: 'Density',\r\n      minWidth: 170,\r\n      align: 'right',\r\n      format: (value) => value.toFixed(2),\r\n    },\r\n  ];\r\n*/\r\n \r\n  \r\n  handleChangePage = (event, newPage) => {\r\n    this.setState({page:newPage});\r\n  };\r\n\r\n  handleChangeRowsPerPage = (event) => {\r\n    this.setState({rowsPerPage:+event.target.value});\r\n    this.setState({page:0});\r\n  };\r\n\r\n  detailsHandler = (item) => {\r\n    this.props.dispatch(setDisplayingPanel(<ItemDetailsPanel item = {item} type = {this.props.type}/>));\r\n  }\r\n\r\n  removeItem = (item) =>{\r\n    /*console.log(\"remove\");\r\n    console.log(item);\r\n    console.log(this.props.token);*/\r\n    removeItem(item.uuid,this.props.token).then((response)=>{\r\n      console.log(response);\r\n      requestMenu(this.props.token).then((response) => {\r\n        this.props.dispatch(setMenu(response.data)); \r\n        this.props.update();   \r\n      });\r\n    });\r\n  }\r\n\r\n  disableHandler = (item)=>{\r\n    changeItemStatus(item.uuid,this.props.token,false).then(()=>{\r\n      this.props.update();\r\n    });\r\n  }\r\n  enableHandler = (item) =>{\r\n    changeItemStatus(item.uuid,this.props.token,true).then(()=>{\r\n        this.props.update();   \r\n    });\r\n  }\r\n\r\n\r\n\r\n  componentDidMount() {\r\n  }\r\n\r\n  render() {\r\n    const {classes,rowsPerPage,page} = this.state;\r\n    const columns = this.columns;\r\n    const rows = this.props.items;\r\n    const handleChangePage = this.handleChangePage.bind(this);\r\n    const handleChangeRowsPerPage = this.handleChangeRowsPerPage.bind(this);\r\n\r\n    return (\r\n      <div >\r\n        <TableContainer  className=\"Test2\">\r\n        <Table stickyHeader aria-label=\"sticky table\" >\r\n          <TableHead >\r\n            <TableRow >\r\n              {columns.map((column) => (\r\n                <TableCell\r\n                  key={column.id}\r\n                  align={column.align}\r\n                  style={{ minWidth: column.minWidth }}\r\n                  classes={{\r\n                    root:\"Chart-header-specs\"\r\n                  }}\r\n                >\r\n                  {column.label}\r\n                </TableCell>\r\n              ))}\r\n            </TableRow>\r\n          </TableHead>\r\n          <TableBody  >\r\n            {rows.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage).map((row) => {\r\n              return (\r\n                <TableRow hover role=\"checkbox\" tabIndex={-1} key={row.code} >\r\n                  {columns.map((column) => {\r\n                    const value = row[column.id];\r\n                    return (\r\n                      <TableCell key={column.id} align={column.align} onClick={(column.id == \"buttons\")?(null):(this.detailsHandler.bind(this,row))} style={{cursor:\"pointer\"}}>\r\n                        {(column.id == \"image\")?(<img alt={row.img} src={row.img} width =\"50\"/>):(\r\n                        (column.id == \"buttons\")?(<>{(!row.enabled)?(<Block  style={{color:\"#ffda61\"}} onClick={this.enableHandler.bind(this,row)}></Block>):(<CheckCircleOutline  onClick={this.disableHandler.bind(this,row)} style={{color:\"#ffda61\"}}></CheckCircleOutline>)}\r\n                        <HighlightOff style={{color:\"#ffda61\"}} onClick={this.removeItem.bind(this,row)}></HighlightOff></>):(<div className=\"OrderCell\">                                                    \r\n                          {column.format && typeof value === 'number' ? column.format(value) : (value)}\r\n                        </div>))}\r\n                        \r\n                      </TableCell>\r\n                    );\r\n                  })}\r\n                </TableRow>\r\n              );\r\n            })}\r\n          </TableBody>\r\n        </Table>\r\n      </TableContainer>\r\n    </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state =>({\r\n  token : state.token,\r\n  user : state.user,\r\n  menu : state.menu,\r\n  order : state.test,\r\n  display : state.display\r\n})\r\n\r\nexport default connect(mapStateToProps,null)(ItemsPanel);\r\n\r\n","C:\\Users\\moguz\\OneDrive\\Masaüstü\\cs491repo\\projectDraft\\react\\qrder\\src\\components\\mainPanels\\Item\\MiniItemPanel.js",["294","295","296","297","298","299","300","301","302","303","304","305","306","307"],"import React from \"react\";\r\nimport { Paper, Table, TableBody, TableCell, TableContainer, TableHead, TablePagination, TableRow } from \"@material-ui/core\";\r\nimport { AccountBalanceWallet, AddCircle, CheckBox, Edit, Face, HighlightOff, HourglassFull } from \"@material-ui/icons\";\r\nimport { connect } from \"react-redux\";\r\nimport { setDisplayingPanel, setMenu } from \"../../../redux/actions\";\r\nimport ItemDetailsPanel from \"./ItemDetailsPanel\";\r\nimport { removeItem, requestMenu } from \"../../../requests/restaurant\";\r\n\r\nclass MiniItemPanel extends React.Component {\r\n  state = {\r\n    info: {\r\n      OrderCount: null,\r\n      orders: [{}],\r\n    },\r\n    page: null,\r\n    rowsPerPage : 10,\r\n  };\r\n\r\n  columns = [\r\n    {\r\n        id: \"name\",\r\n        label: \"Name\",\r\n        minWidth: 170,\r\n        align: \"left\",\r\n      },\r\n    {\r\n      id: \"price\",\r\n      label: \"Price\",\r\n      minWidth: 10,\r\n      align: \"center\",\r\n    }\r\n    ,\r\n    {\r\n      id: \"buttons\",\r\n      label: \"\",\r\n      minWidth: 10,\r\n      align: \"center\",\r\n    }\r\n  ];\r\n\r\n /* columns = [\r\n    { id: 'name', label: 'Name', minWidth: 170 },\r\n    { id: 'code', label: 'ISO\\u00a0Code', minWidth: 100 },\r\n    {\r\n      id: 'population',\r\n      label: 'Population',\r\n      minWidth: 170,\r\n      align: 'right',\r\n      format: (value) => value.toLocaleString('en-US'),\r\n    },\r\n    {\r\n      id: 'size',\r\n      label: 'Size\\u00a0(km\\u00b2)',\r\n      minWidth: 170,\r\n      align: 'right',\r\n      format: (value) => value.toLocaleString('en-US'),\r\n    },\r\n    {\r\n      id: 'density',\r\n      label: 'Density',\r\n      minWidth: 170,\r\n      align: 'right',\r\n      format: (value) => value.toFixed(2),\r\n    },\r\n  ];\r\n*/\r\n \r\n  \r\n  handleChangePage = (event, newPage) => {\r\n    this.setState({page:newPage});\r\n  };\r\n\r\n  handleChangeRowsPerPage = (event) => {\r\n    this.setState({rowsPerPage:+event.target.value});\r\n    this.setState({page:0});\r\n  };\r\n\r\n  detailsHandler = (item) => {\r\n    console.log(item);\r\n    this.props.dispatch(setDisplayingPanel(<ItemDetailsPanel item = {item}/>));\r\n  }\r\n\r\n  removeItem = (item) =>{\r\n    /*console.log(\"remove\");\r\n    console.log(item);\r\n    console.log(this.props.token);*/\r\n    removeItem(item.uuid,this.props.token).then((response)=>{\r\n      console.log(response);\r\n      requestMenu(this.props.token).then((response) => {\r\n        this.props.dispatch(setMenu(response.data.menu));    \r\n      });\r\n    });\r\n  }\r\n\r\n\r\n\r\n  componentDidMount() {\r\n  }\r\n\r\n  render() {\r\n    const {classes,rowsPerPage,page} = this.state;\r\n    const columns = this.columns;\r\n    const rows = this.props.items;\r\n    const handleChangePage = this.handleChangePage.bind(this);\r\n    const handleChangeRowsPerPage = this.handleChangeRowsPerPage.bind(this);\r\n\r\n    return (\r\n      <div >\r\n        <TableContainer  >\r\n        <Table stickyHeader aria-label=\"sticky table\" >\r\n          <TableHead >\r\n            <TableRow >\r\n              {columns.map((column) => (\r\n                <TableCell\r\n                  key={column.id}\r\n                  align={column.align}\r\n                  style={{ minWidth: column.minWidth }}\r\n                  classes={{\r\n                    root:\"Chart-header-specs\"\r\n                  }}\r\n                >\r\n                  {column.label}\r\n                </TableCell>\r\n              ))}\r\n            </TableRow>\r\n          </TableHead>\r\n          <TableBody  >\r\n            {rows.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage).map((row) => {\r\n              return (\r\n                <TableRow hover role=\"checkbox\" tabIndex={-1} key={row.code} >\r\n                  {columns.map((column) => {\r\n                    const value = row[column.id];\r\n                    return (\r\n                      <TableCell key={column.id} align={column.align} onClick={(column.id == \"buttons\")?(null):(this.detailsHandler.bind(this,row))} style={{cursor:\"pointer\"}}>\r\n                        {(column.id == \"image\")?(<img alt={row.img} src={row.img} width =\"50\"/>):(\r\n                        (column.id == \"buttons\")?(<AddCircle style={{color:\"#ffda61\"}} onClick={this.props.addHandler.bind(this,row)}></AddCircle>):(<div className=\"OrderCell\">                                                    \r\n                          {column.format && typeof value === 'number' ? column.format(value) : (value)}\r\n                        </div>))}\r\n                        \r\n                      </TableCell>\r\n                    );\r\n                  })}\r\n                </TableRow>\r\n              );\r\n            })}\r\n          </TableBody>\r\n        </Table>\r\n      </TableContainer>\r\n    </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state =>({\r\n  token : state.token,\r\n  user : state.user,\r\n  menu : state.menu,\r\n  order : state.test,\r\n  display : state.display\r\n})\r\n\r\nexport default connect(mapStateToProps,null)(MiniItemPanel);\r\n\r\n","C:\\Users\\moguz\\OneDrive\\Masaüstü\\cs491repo\\projectDraft\\react\\qrder\\src\\components\\mainPanels\\tables\\TablePanel.js",["308","309","310"],"import React from \"react\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Table from \"./Table\"\r\nimport { createTable, getTablesRequest } from \"../../../requests/restaurant\";\r\nimport { connect } from \"react-redux\";\r\nimport { setDisplayingPanel, setTables, test } from \"../../../redux/actions\";\r\nimport { Button, TextField, withStyles } from \"@material-ui/core\";\r\nimport resClient from \"../../../mqtt/client\";\r\n\r\nclass TablePanel extends React.Component {\r\n  \r\n  state = {\r\n    info:{\r\n      tableCount:null,\r\n      tables:[{}]\r\n    },\r\n    columns :[],\r\n    compListener : null,\r\n   };\r\n  \r\n   componentWillUnmount(){\r\n    document.removeEventListener(\"table\", this.state.compListener);\r\n    document.removeEventListener(\"order\", this.state.compListener);\r\n   }\r\n\r\n  componentDidMount(){\r\n    var compListener = ()=>{this.update()};\r\n    this.setState({compListener:compListener});\r\n    document.addEventListener(\"table\",compListener);    \r\n    document.addEventListener(\"order\",compListener);\r\n      if(this.props.tables.table){\r\n        var rows = [];\r\n        const columns = [];\r\n        for (var i = 0; i < this.props.tables.table.length; i++) {\r\n        rows.push(\r\n            <Grid item xs={2} className=\"GridElement\">\r\n            <Table tableInfo={this.props.tables.table[i]}/>\r\n            </Grid>\r\n        );\r\n        }\r\n            columns.push(\r\n            <Grid container item xs={12} spacing={5}>\r\n                {rows}\r\n            </Grid>\r\n        );\r\n        this.setState({columns});\r\n      }else{\r\n        getTablesRequest(this.props.token).then((response)=>{\r\n            this.props.dispatch(setTables(response.data));\r\n            var rows = [];\r\n            const columns = [];\r\n            for (var i = 0; i < response.data.length; i++) {\r\n            rows.push(\r\n                <Grid item xs={2} className=\"GridElement\">\r\n                <Table tableInfo={response.data[i]}/> \r\n                </Grid>\r\n            );\r\n            }\r\n                columns.push(\r\n                <Grid container item xs={12} spacing={5}>\r\n                    {rows}\r\n                </Grid>\r\n            );\r\n            this.setState({columns});\r\n          });\r\n      }\r\n       \r\n        \r\n    \r\n  }\r\n\r\n  add = () =>{\r\n    //alert(document.getElementById(\"tableAddTextField\").value);\r\n    createTable(document.getElementById(\"tableAddTextField\").value,this.props.token).then(()=>{      \r\n      const event = new Event('table'); \r\n      document.dispatchEvent(event);\r\n    });\r\n  }\r\n\r\n  update = () =>{\r\n    //this.setState({columns : []})\r\n    getTablesRequest(this.props.token).then((response)=>{\r\n      this.props.dispatch(setTables(response.data));\r\n      var rows = [];\r\n      const columns = [];\r\n      var rows1 = [];\r\n      for (var i = 0; i < response.data.length; i++) {\r\n        console.log(response.data[i]);\r\n      rows.push(\r\n          <Grid item xs={2} className=\"GridElement\">\r\n            <Table key = {response.data[i].uuid} tableInfo={response.data[i]}/> \r\n          </Grid>\r\n      );\r\n      rows1.push(\r\n        <Grid item xs={2} className=\"GridElement\">\r\n            \r\n          </Grid>\r\n      );\r\n      }\r\n          columns.push(\r\n          <Grid container item xs={12} spacing={5}>\r\n              {rows1}\r\n          </Grid>         \r\n      );      \r\n      this.setState({columns});\r\n      columns.pop();\r\n      columns.push(\r\n        <Grid container item xs={12} spacing={5}>\r\n            {rows}\r\n        </Grid>         \r\n    );      \r\n    this.setState({columns});\r\n      console.log(columns);\r\n\r\n    });\r\n//    this.props.dispatch(setDisplayingPanel(<TablePanel/>));\r\n  }\r\n\r\n  render() {\r\n    const {classes} = this.props;\r\n    /*if(this.props.mqtt != \"\"){\r\n      console.log(this.props.mqtt);\r\n      this.props.dispatch(test(\"\"));\r\n      this.update();\r\n            \r\n    }*/\r\n    \r\n    return (\r\n      <div className=\"TablePanel\">\r\n        \r\n        <span style={{float:\"center\"}}>\r\n        <TextField id=\"tableAddTextField\" label = \"TableName\"                                     \r\n                                    type=\"text\"                                     \r\n                                    className = {classes.main}  \r\n                                    InputProps={{\r\n                                            classes:{\r\n                                                input:classes.font\r\n                                            }\r\n                                        }}\r\n                                        InputLabelProps={{\r\n                                            classes:{\r\n                                                root: classes.font,\r\n                                            }\r\n                                        }}\r\n                                    />\r\n                                    <Button                                    \r\n                                    classes={{\r\n                                      root: classes.buttonRoot, // class name, e.g. `classes-nesting-root-x`\r\n                                      label: classes.buttonLabel, // class name, e.g. `classes-nesting-label-x`\r\n                                  }}\r\n                                  onClick={this.add.bind(this)}\r\n                                    >Add</Button>\r\n          </span>\r\n          <hr/>\r\n        <Grid container spacing={1}>\r\n          {this.state.columns}\r\n        </Grid>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nconst mapStateToProps = state =>({\r\n    token : state.token,\r\n    user : state.user,\r\n    menu : state.menu,\r\n    order : state.test,\r\n    display : state.display,\r\n    tables : state.tables,\r\n    mqtt : state.mqtt\r\n  })\r\n\r\n  const useStyles = {\r\n    main:{\r\n        '& label.Mui-focused': {\r\n            color: '#c4a748d0',\r\n          },          \r\n    '& .MuiInput-underline:after': {\r\n        borderBottomColor: '#c4a748d0',\r\n      },\r\n    },\r\n    font:{\r\n        color : \"#c4a748d0\",\r\n        '&:-webkit-autofill': {\r\n            transitionDelay: '9999s',\r\n            transitionProperty: 'background-color, color',\r\n          },\r\n    },\r\n    buttonRoot: {\r\n        background: 'linear-gradient(45deg, #c4a748d0 30%, #c4a748d0 90%)',\r\n        borderRadius: 3,\r\n        border: 0,\r\n        color: 'black',\r\n        height: 48,\r\n        padding: '0 30px',\r\n      },\r\n    buttonLabel: {\r\n        textTransform: 'capitalize',\r\n    },\r\n}\r\n  \r\n\r\nexport default  connect(mapStateToProps,null)(withStyles(useStyles)(TablePanel));","C:\\Users\\moguz\\OneDrive\\Masaüstü\\cs491repo\\projectDraft\\react\\qrder\\src\\components\\mainPanels\\tables\\Table.js",["311","312","313","314","315","316"],"import { AccountBalanceWallet, CheckBox, Face, HourglassFull } from \"@material-ui/icons\";\r\nimport React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { setDisplayingPanel } from \"../../../redux/actions\";\r\nimport TableDetails from \"./TableDetails\";\r\nconst moment = require('moment');\r\n\r\nclass Table extends React.Component {\r\n\r\n    state = {\r\n          orderCount:null,\r\n          orders:[{}],\r\n          earliestOrderTime : null,\r\n          notifications : []\r\n       };\r\n\r\n       tableDetails(table){\r\n       //alert(\"hi\");\r\n       \r\n        this.props.dispatch(setDisplayingPanel(<TableDetails table={table}/>));\r\n        \r\n\r\n       }\r\n\r\n       componentDidMount(){\r\n           if(this.props.tableInfo.status){\r\n                var temp = {orderCount : this.props.tableInfo.Orders.length,\r\n                            orders : this.props.tableInfo.Orders,\r\n                            earliestOrderTime : -1,\r\n                            notifications : []};\r\n\r\n                if(this.props.tableInfo.services){\r\n\r\n                    this.props.tableInfo.services.map((service)=>{\r\n                        switch(service.name){\r\n                            case \"waiter\":\r\n                                temp.notifications.push({name:\"waiter\",icon:<Face className=\"Waiter\"/>});\r\n                                break;\r\n                            case \"payment\":\r\n                                temp.notifications.push({name:\"payment\",icon:<AccountBalanceWallet className=\"Payment\"/>});\r\n                                break;\r\n                        }\r\n                    });\r\n                }\r\n                if(this.props.tableInfo.mostDelayedDate){                    \r\n                    temp.earliestOrderTime = moment().diff(moment(this.props.tableInfo.mostDelayedDate),\"minutes\");\r\n                }else{\r\n                    temp.earliestOrderTime = -1;\r\n                }\r\n                temp.notifications.push({name:\"served\",icon:<CheckBox className=\"Done\"/>});\r\n                temp.orders.map((order)=>{\r\n                    if(order.status == \"waiting\"){\r\n                        temp.notifications.pop();\r\n                        temp.notifications.push({name:\"waiting\",icon:<HourglassFull className=\"Waiting\"/>});\r\n                    }\r\n                });\r\n                this.setState(temp);\r\n            }\r\n            \r\n       }\r\n\r\n  render() {\r\n      \r\n    return (\r\n      \r\n        <div className=\"Table\"  onClick= {this.tableDetails.bind(this,this.props.tableInfo)}\r\n        style={{cursor:\"pointer\" , background: (this.state.earliestOrderTime != null)?(getViewValues(this.state.earliestOrderTime)):(\"#c4a748\") }}>\r\n            <span className=\"TableContent\">\r\n            {this.props.tableInfo.name}\r\n            \r\n            </span>\r\n            {this.state.notifications.map((notification)=>{return (notification.icon)})\r\n            }\r\n        </div>   \r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state =>({\r\n    token : state.token,\r\n    user : state.user,\r\n    menu : state.menu,\r\n    order : state.test,\r\n    display : state.display\r\n  })\r\n\r\nexport default connect(mapStateToProps,null)(Table);\r\n\r\n\r\nfunction componentToHex(c) {\r\n    var hex = c.toString(16);\r\n    return hex.length == 1 ? \"0\" + hex : hex;\r\n  }\r\n  \r\n  function rgbToHexFirst(r, g, b) {\r\n    return \"#\" + componentToHex(r) + componentToHex(g) + componentToHex(b);\r\n  }\r\n  \r\n  function getViewValues(time){\r\n      /*var firstColor = \"#c4a748e8\";\r\n      var secondColor =  \"#33ccffe8\";\r\n      secondColor = \"#ffffffe8\";\r\n      var thirdColor =  \"#282c34e8\";\r\n      thirdColor = rgbToHexFirst(255,0,0)+\"40\";\r\n      var type = \"radial-gradient(\";*/\r\n  \r\n      if(time == -1){\r\n          return \"#9c9c9c\";\r\n      }\r\n      //Base\r\n      time = (time/45)*255;     \r\n      const alpha = \"d0\";\r\n      const firstColor = rgbToHexFirst(0,255,0)+alpha;\r\n      const secondColor =  rgbToHexFirst(255,255,0)+alpha;\r\n      const thirdColor =  rgbToHexFirst(255,0,0)+alpha;\r\n      const type = \"linear-gradient(150deg,\";\r\n      if(time==null){\r\n        return \"#9c9c9c\";\r\n      }    \r\n      if(time<=63){\r\n          return type +  firstColor + \" \"+ (100-(((time)*100)/63)) +\"%,\" + secondColor + \" 100%)\";\r\n      }else if(time<127){\r\n          return type +  firstColor + \" 0%,\" + secondColor + \" \"+(100-(((time-63)*100)/63))+\"%)\";\r\n      }else if( time < 190){\r\n          return type +  secondColor + \" \"+ (100-(((time-127)*100)/63)) +\"%,\" + thirdColor + \" 100%)\";\r\n      }else{\r\n          return type +  secondColor + \" 0%,\" + thirdColor + \" \"+(100-(((time-190)*100)/63))+\"%)\";\r\n      }\r\n  }","C:\\Users\\moguz\\OneDrive\\Masaüstü\\cs491repo\\projectDraft\\react\\qrder\\src\\components\\mainPanels\\tables\\TableDetails.js",["317","318","319","320","321","322","323","324","325","326","327","328","329","330","331","332","333","334","335","336","337","338","339","340","341","342","343","344","345","346","347"],"import React from \"react\";\r\nimport { Button, Grid, Paper, Table, TableBody, TableCell, TableContainer, TableHead, TablePagination, TableRow, withStyles } from \"@material-ui/core\";\r\nimport { AccountBalanceWallet, AddCircle, CheckBox, Edit, Face, HourglassFull } from \"@material-ui/icons\";\r\nimport { connect } from \"react-redux\";\r\nimport { setDisplayingPanel, setMenu } from \"../../../redux/actions\";\r\nimport ItemDetailsPanel from \"../Item/ItemDetailsPanel\";\r\nimport { addService, removeService, removeTable, requestMenu } from \"../../../requests/restaurant\";\r\nimport MiniItemPanel from \"../Item/MiniItemPanel\";\r\nimport MiniOrderPanel from \"../order/MiniOrderPanel\";\r\nimport MiniServicePanel from \"./MiniServicePanel\";\r\nimport OrderCreatePanel from \"../order/OrderCreatePanel\";\r\nimport TablePanel from \"./TablePanel\";\r\n\r\nvar QRCode = require('qrcode.react');\r\n\r\nclass TableDetails extends React.Component {\r\n  state = {\r\n      table:{},\r\n    order : {\r\n        items : [],\r\n        totalPrice : 0,\r\n    },\r\n    page: null,\r\n    rowsPerPage : 10,\r\n    columns : []\r\n  };\r\n\r\n  columns = [\r\n    \r\n    {\r\n        id: \"name\",\r\n        label: \"Menu\",\r\n        minWidth: 200,\r\n        align: \"Center\",\r\n      }\r\n  ];\r\n \r\n  \r\n  handleChangePage = (event, newPage) => {\r\n    this.setState({page:newPage});\r\n  };\r\n\r\n  handleChangeRowsPerPage = (event) => {\r\n    this.setState({rowsPerPage:+event.target.value});\r\n    this.setState({page:0});\r\n  };\r\n\r\n /* addItemToOrderHandler = (item) => {\r\n    var items = this.state.order.items;\r\n    items.push(item);   \r\n    var order = {items : items,\r\n                totalPrice : this.state.order.totalPrice + item.price};\r\n    this.setState({order : order});\r\n  }*/\r\n\r\n  addItemToOrderHandler = (item) => {\r\n    var items = this.state.order.items;\r\n    if(items.find(element => element.uuid == item.uuid)){\r\n      items.find(element => element.uuid == item.uuid).quantity++;      \r\n      items.find(element => element.uuid == item.uuid).price +=item.price;\r\n      if(items.find(element => element.uuid == item.uuid).quantity < 3){\r\n        items.find(element => element.uuid == item.uuid).name +=\"x2\";\r\n      }else{                \r\n        var tempString = items.find(element => element.uuid == item.uuid).name.substr(0,items.find(element => element.uuid == item.uuid).name.length-1);\r\n        items.find(element => element.uuid == item.uuid).name= tempString;\r\n        items.find(element => element.uuid == item.uuid).name += items.find(element => element.uuid == item.uuid).quantity;\r\n      }\r\n    }else{      \r\n      var tempItem = {name:item.name,price : item.price,uuid : item.uuid,metadata:item.metadata,quantity:1};\r\n      items.push(tempItem);  \r\n    } \r\n    var order = {items : items,\r\n                totalPrice : this.state.order.totalPrice + item.price};\r\n    this.setState({order : order});\r\n  }\r\n\r\n  test = () =>{\r\n    console.log(this.props.table.uuid);\r\n    /*removeService(this.props.token,\"waiter\",this.props.table.uuid).then((response)=>{\r\n      console.log(response);\r\n    });*/\r\n  }\r\n\r\n\r\n\r\n   \r\n  downloadQR = () =>{\r\n    const canvas = document.getElementById(`qr${this.props.table.uuid}`);\r\n    const pngUrl = canvas\r\n      .toDataURL(\"image/png\")\r\n      .replace(\"image/png\", \"image/octet-stream\");\r\n    let downloadLink = document.createElement(\"a\");\r\n    downloadLink.href = pngUrl;\r\n    downloadLink.download = \"123456.jpg\";\r\n    document.body.appendChild(downloadLink);\r\n    downloadLink.click();\r\n    document.body.removeChild(downloadLink);\r\n  }\r\n\r\n  removeTable = () =>{\r\n    removeTable(this.props.token,this.props.table.uuid).then(()=>{      \r\n      const event = new Event('table'); \r\n      document.dispatchEvent(event);\r\n      this.props.dispatch(setDisplayingPanel(<TablePanel/>));\r\n    });\r\n\r\n  }\r\n\r\n\r\n  componentDidMount() {\r\n    //console.log(\"orderpanel : \" + this.props.token);\r\n\r\n    console.log(\"here\");\r\n        console.log(this.props.table);\r\n        this.setState({table:this.props.table});\r\n      \r\n    this.setState({columns:this.columns});\r\n    \r\n    /*this.setState({info : getOrders()});\r\n    setInterval(function(){      \r\n      this.setState({info : getOrders()});\r\n    }.bind(this),10);*/\r\n  }\r\n\r\n  render() {\r\n    const {classes} = this.props;\r\n    const {rowsPerPage,page} = this.state;\r\n    const handleChangePage = this.handleChangePage.bind(this);\r\n    const handleChangeRowsPerPage = this.handleChangeRowsPerPage.bind(this);\r\n/**/\r\n    return (\r\n      <div >\r\n          \r\n          <Grid container spacing={1}>\r\n              \r\n                    <Grid item xs={4} className=\"GridElement\">\r\n                                    <div className=\"BigTag\" onClick = {this.test}>                                                                                     \r\n                                            <QRCode id={`qr${this.props.table.uuid}`} value={`${this.props.user.uuid}:${this.props.table.uuid}`} bgColor=\"#837032\" fgColor=\"#282c34e8\"/>\r\n                                        </div>\r\n                    </Grid>\r\n                    <Grid item xs={8} className=\"GridElement\">\r\n                         <Grid container spacing={1}>\r\n                          <Grid item xs={12} className=\"GridElement\">\r\n                                      <div className=\"BigTag\" onClick = {this.test}>\r\n                                              {this.props.table.name} \r\n                                          </div>  \r\n                            </Grid>           \r\n                          <Grid item xs={12} className=\"GridElement\">\r\n                                                  <a style={{cursor:\"pointer\"}}onClick={this.downloadQR}>Download QR</a>\r\n                          </Grid>                            \r\n                        </Grid>           \r\n                    </Grid>             \r\n                                        \r\n                    <Grid item xs={9} className=\"GridElement\" >\r\n                            <Grid container spacing={1}>\r\n                                \r\n                                <Grid item xs={12} className=\"GridElement\"style={{maxHeight:\"300px\"}} >\r\n                                    <div className=\"BigMenu\">\r\n                                      <br/>\r\n                                    <Button\r\n                                        classes={{\r\n                                            root: classes.buttonRoot, // class name, e.g. `classes-nesting-root-x`\r\n                                            label: classes.buttonLabel, // class name, e.g. `classes-nesting-label-x`\r\n                                        }}\r\n                                        onClick={()=>{this.props.dispatch(setDisplayingPanel(<OrderCreatePanel tableUuid={this.props.table.uuid}/>));}}\r\n                                          >Add Order</Button>\r\n                                          <br/>\r\n                                          <br/>\r\n                                    <TableContainer  className=\"BigMenu2\">\r\n                                      <Table stickyHeader aria-label=\"sticky table\" >\r\n                                        <TableBody  >\r\n                                              <TableRow hover role=\"checkbox\" tabIndex={-1} key={this.state.table.name} >\r\n                                                {this.state.columns.map((column) => {\r\n                                                  return (<>                     \r\n                                                    <MiniOrderPanel tableOrders = {this.state.table.Orders} tableUuid={this.props.table.uuid}/>\r\n                                                    </>\r\n                                                  );\r\n                                                })}\r\n                                              </TableRow>\r\n                                          \r\n                                        </TableBody>\r\n                                      </Table>\r\n                                    </TableContainer>\r\n                                    </div>\r\n                                </Grid>\r\n                            </Grid>\r\n                            \r\n                    </Grid>\r\n                    <Grid item xs={3} className=\"GridElement\">                        \r\n                        <Grid item xs={12} className=\"GridElement\" style={{maxHeight:\"300px\"}} >\r\n                          <div className=\"BigMenu\">\r\n                        <br/>\r\n                          <Button\r\n                                        classes={{\r\n                                            root: classes.buttonRoot, // class name, e.g. `classes-nesting-root-x`\r\n                                            label: classes.buttonLabel, // class name, e.g. `classes-nesting-label-x`\r\n                                        }}\r\n                                        onClick={this.removeTable}\r\n                                          >Remove Table</Button>\r\n                                          <br/>\r\n                                          <br/>\r\n                                    <TableContainer  className=\"BigMenu2\">\r\n                                      <Table stickyHeader aria-label=\"sticky table\" >\r\n                                        <TableBody  >\r\n                                              <TableRow hover role=\"checkbox\" tabIndex={-1} key={this.state.table.name} >\r\n                                                {this.state.columns.map((column) => {\r\n                                                  return (<>   \r\n                                                        <MiniServicePanel tableUuid={this.state.table.uuid} tableServices = {this.state.table.services}/>\r\n                                                    </>\r\n                                                  );\r\n                                                })}\r\n                                              </TableRow>\r\n                                            \r\n                                          \r\n                                        </TableBody>\r\n                                      </Table>\r\n                                    </TableContainer>\r\n                                    </div>\r\n                        </Grid>                         \r\n                    </Grid>\r\n                </Grid>\r\n       \r\n    </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst useStyles = {\r\n  main:{\r\n      '& label.Mui-focused': {\r\n          color: '#c4a748d0',\r\n        },          \r\n  '& .MuiInput-underline:after': {\r\n      borderBottomColor: '#c4a748d0',\r\n    },\r\n  },\r\n  font:{\r\n      color : \"#c4a748d0\",\r\n      '&:-webkit-autofill': {\r\n          transitionDelay: '9999s',\r\n          transitionProperty: 'background-color, color',\r\n        },\r\n  },\r\n  buttonRoot: {\r\n      background: 'linear-gradient(45deg, #c4a748d0 30%, #c4a748d0 90%)',\r\n      borderRadius: 3,\r\n      border: 0,\r\n      color: 'black',\r\n      height: 48,\r\n      padding: '0 30px',\r\n    },\r\n  buttonLabel: {\r\n      textTransform: 'capitalize',\r\n  },\r\n}\r\n\r\nconst mapStateToProps = state =>({\r\n  token : state.token,\r\n  user : state.user,\r\n  menu : state.menu,\r\n  order : state.test,\r\n  display : state.display\r\n})\r\n\r\nexport default connect(mapStateToProps,null)(withStyles(useStyles)(TableDetails));\r\n\r\n","C:\\Users\\moguz\\OneDrive\\Masaüstü\\cs491repo\\projectDraft\\react\\qrder\\src\\components\\mainPanels\\order\\MiniOrderPanel.js",["348","349","350","351","352","353","354","355","356","357","358","359","360"],"import React from \"react\";\r\nimport { Paper, Table, TableBody, TableCell, TableContainer, TableHead, TablePagination, TableRow } from \"@material-ui/core\";\r\nimport { AccountBalanceWallet, CheckBox, DeleteForever, Face, HourglassFull } from \"@material-ui/icons\";\r\nimport { connect } from \"react-redux\";\r\nimport { requestOrders } from \"../../../requests/restaurant\";\r\nimport { setDisplayingPanel, setOrders } from \"../../../redux/actions\";\r\nimport { getSpecificOrder, payOrder, removeOrder, serveOrder } from \"../../../requests/order\";\r\nimport OrderCreatePanel from \"./OrderCreatePanel\";\r\n\r\nconst moment = require('moment');\r\n\r\nclass MiniOrderPanel extends React.Component {\r\n  state = {\r\n    info: {\r\n      OrderCount: null,\r\n      orders: [{}],\r\n    },\r\n    page: 0,\r\n    rowsPerPage : 10,\r\n  };\r\n\r\n  columns = [\r\n    {\r\n      id: \"orderNo\",\r\n      label: \"Order No\",\r\n      minWidth: 30,\r\n      align: \"left\",\r\n    },\r\n    {\r\n      id: \"time\",\r\n      label: \"Time\",\r\n      minWidth: 30,\r\n      align: \"center\",\r\n    },\r\n    {\r\n      id: \"price\",\r\n      label: \"Price\",\r\n      minWidth: 30,\r\n      align: \"right\",\r\n    },\r\n    {\r\n      id: \"status\",\r\n      label: \"Status\",\r\n      minWidth: 30,\r\n      align: \"right\",\r\n    },    \r\n    {\r\n        id: \"actions\",\r\n        label: \"Edit\",\r\n        minWidth: 30,\r\n        align: \"right\",\r\n      },\r\n  ];\r\n \r\n  \r\n  handleChangePage = (event, newPage) => {\r\n    this.setState({page:newPage});\r\n  };\r\n\r\n  handleChangeRowsPerPage = (event) => {\r\n    this.setState({rowsPerPage:+event.target.value});\r\n    this.setState({page:0});\r\n  };\r\n\r\n  removeOrder= (uuid) =>{\r\n    //console.log(this.state.info.orders);\r\n    removeOrder(this.props.token,uuid).then((response)=>{\r\n      const event = new Event('order'); \r\n      document.dispatchEvent(event);\r\n      this.updateOrders();\r\n    });\r\n  }\r\n\r\n  serveOrder = (uuid) => {\r\n    serveOrder(this.props.token,uuid).then((response)=>{\r\n      console.log(response);\r\n      const event = new Event('order'); \r\n      document.dispatchEvent(event);\r\n      this.updateOrders();\r\n    })\r\n  }\r\n\r\n  payOrder = (uuid) =>{\r\n    payOrder(this.props.token,uuid).then((response)=>{\r\n      console.log(response);\r\n      const event = new Event('order'); \r\n      document.dispatchEvent(event);\r\n      this.updateOrders();\r\n    })\r\n  }\r\n\r\n  updateOrders = () =>{\r\n    var temp = [];\r\n\r\n    this.setState({info:{orderCount:0,\r\n              orders : temp}});\r\n    this.props.tableOrders.map((order)=>{\r\n         getSpecificOrder(this.props.token,order.uuid).then((result)=>{\r\n            console.log(result);\r\n            if(result.status != \"paid\"){\r\n              temp.push({\r\n                uuid : order.uuid,\r\n                orderNo:result.no,\r\n                time : moment().diff(moment(result.createdAt),\"minutes\"),\r\n                status : result.status ,\r\n                price : result.totalPrice,\r\n                actions : <div>{(result.status == \"waiting\")?(<CheckBox onClick={this.serveOrder.bind(this,order.uuid)}/>):(<AccountBalanceWallet onClick={this.payOrder.bind(this,order.uuid)}/>) }<br/><DeleteForever onClick={this.removeOrder.bind(this,order.uuid)}/></div>});\r\n                \r\n              this.setState({info:{orderCount:temp.length,\r\n                orders :temp}});\r\n            }\r\n            \r\n         }).catch((error)=>{\r\n         });\r\n    });\r\n    \r\n  }\r\n\r\n  orderDetails = (orderUuid) =>{\r\n    this.props.dispatch(setDisplayingPanel(<OrderCreatePanel tableUuid={this.props.tableUuid} updateItemUuid={orderUuid}/>))\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.updateOrders();\r\n    \r\n  }\r\n\r\n  render() {\r\n    const {classes,rowsPerPage,page} = this.state;\r\n    const columns = this.columns;\r\n    const rows = this.state.info.orders;\r\n    const handleChangePage = this.handleChangePage.bind(this);\r\n    const handleChangeRowsPerPage = this.handleChangeRowsPerPage.bind(this);\r\n    const icons = [];\r\n    icons[\"waiting\"] = <HourglassFull  style={{fontSize:\"40\"}}/>;\r\n    icons[\"served\"] = <CheckBox style={{fontSize:\"40\"}}/>;\r\n    //<CheckBox style={{fontSize:\"40\"}}/>,<AccountBalanceWallet style={{fontSize:\"40\"}}/>,<Face  style={{fontSize:\"40\"}}/>,<HourglassFull  style={{fontSize:\"40\"}}/>\r\n    return (\r\n      <div >\r\n        <TableContainer  className=\"Test2\">\r\n        <Table stickyHeader aria-label=\"sticky table\" >\r\n          <TableHead >\r\n            <TableRow >\r\n              {columns.map((column) => (\r\n                <TableCell\r\n                  key={column.id}\r\n                  align={column.align}\r\n                  style={{ minWidth: column.minWidth }}\r\n                  classes={{\r\n                    root:\"Chart-header-specs\"\r\n                  }}\r\n                >\r\n                  {column.label}\r\n                </TableCell>\r\n              ))}\r\n            </TableRow>\r\n          </TableHead>\r\n          <TableBody  >\r\n            {rows.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage).map((row,index) => {\r\n              return (\r\n                <TableRow hover role=\"checkbox\" tabIndex={-1} key={row.code} >\r\n                  {columns.map((column) => {\r\n                    const value = row[column.id];\r\n                    return (\r\n                      <TableCell key={column.id} align={column.align} onClick={(column.id ==\"actions\")?(null):(this.orderDetails.bind(this,row.uuid))}>\r\n                        <div className=\"OrderCell\" >                                                    \r\n                          {column.format && typeof value === 'number' ? column.format(value) : ((column.id == \"status\")?(icons[value]):(value))}\r\n                          \r\n                        </div>\r\n                      </TableCell>\r\n                    );\r\n                  })}\r\n                </TableRow>\r\n              );\r\n            })}\r\n          </TableBody>\r\n        </Table>\r\n      </TableContainer>\r\n    </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state =>({\r\n  token : state.token,\r\n  user : state.user,\r\n  orders : state.orders\r\n})\r\n\r\nexport default connect(mapStateToProps,null)(MiniOrderPanel);\r\n\r\n","C:\\Users\\moguz\\OneDrive\\Masaüstü\\cs491repo\\projectDraft\\react\\qrder\\src\\components\\mainPanels\\tables\\MiniServicePanel.js",["361","362","363","364","365","366","367","368","369","370","371"],"import React from \"react\";\r\nimport { Paper, Table, TableBody, TableCell, TableContainer, TableHead, TablePagination, TableRow } from \"@material-ui/core\";\r\nimport { AccessibilityNew, AccountBalanceWallet, CheckBox, DeleteForever, Face, HourglassFull } from \"@material-ui/icons\";\r\nimport { connect } from \"react-redux\";\r\nimport { removeService, requestOrders } from \"../../../requests/restaurant\";\r\nimport { setOrders } from \"../../../redux/actions\";\r\n\r\nconst moment = require('moment');\r\n\r\nclass MiniServicePanel extends React.Component {\r\n  state = {\r\n    info: {\r\n      serviceCount: null,\r\n      services: [{}],\r\n    },\r\n    page: 0,\r\n    rowsPerPage : 10,\r\n  };\r\n\r\n  columns = [    \r\n    {\r\n        id: \"service\",\r\n        label: \"Service\",\r\n        minWidth: 30,\r\n        align: \"left\",\r\n      },  \r\n      {\r\n      id: \"time\",\r\n      label: \"Time\",\r\n      minWidth: 30,\r\n      align: \"center\",\r\n    },  \r\n    {\r\n        id: \"actions\",\r\n        label: \"Edit\",\r\n        minWidth: 20,\r\n        align: \"right\",\r\n      },\r\n  ];\r\n \r\n  \r\n  handleChangePage = (event, newPage) => {\r\n    this.setState({page:newPage});\r\n  };\r\n\r\n  handleChangeRowsPerPage = (event) => {\r\n    this.setState({rowsPerPage:+event.target.value});\r\n    this.setState({page:0});\r\n  };\r\n\r\n  updateServices = (services) =>{\r\n\r\n    var temp = [];\r\n    var serviceIcon;\r\n    if(this.props.tableServices){\r\n      this.props.tableServices.map((service,index)=>{     \r\n          switch(service.name){\r\n              case \"waiter\":\r\n                  serviceIcon = <Face/>;\r\n                  break;\r\n              case \"payment\":\r\n                  serviceIcon = <AccountBalanceWallet/>\r\n                  break;\r\n              default:\r\n                  serviceIcon = <AccessibilityNew/>\r\n                  break;\r\n\r\n          }\r\n          temp.push({orderNo:index+1,\r\n              time : moment().diff(moment(service.createdAt),\"minutes\"),\r\n              service : serviceIcon,\r\n              actions : <CheckBox onClick={this.serve.bind(this,service.name)} />});\r\n      });\r\n    }\r\n    this.setState({info:{serviceCount:temp.length,\r\n                        services :temp}});\r\n\r\n    \r\n  }\r\n\r\n serve = (serviceName) =>{\r\n  console.log(this.props.tableUuid);\r\n  console.log(serviceName);\r\n  removeService(this.props.token,serviceName,this.props.tableUuid).then((response)=>{\r\n    console.log(response.data);    \r\n    const event = new Event('table'); \r\n    document.dispatchEvent(event);    \r\n    var temp = [];\r\n    if(response.data.services){\r\n      var serviceIcon;\r\n      response.data.services.map((service,index)=>{     \r\n          switch(service.name){\r\n              case \"waiter\":\r\n                  serviceIcon = <Face/>;\r\n                  break;\r\n              case \"payment\":\r\n                  serviceIcon = <AccountBalanceWallet/>\r\n                  break;\r\n              default:\r\n                  serviceIcon = <AccessibilityNew/>\r\n                  break;\r\n\r\n          }\r\n          temp.push({orderNo:index+1,\r\n              time : moment().diff(moment(service.createdAt),\"minutes\"),\r\n              service : serviceIcon,\r\n              actions : <CheckBox onClick={this.serve.bind(this,service.name)} />});\r\n      });\r\n    }\r\n    this.setState({info:{serviceCount:temp.length,\r\n                        services :temp}});\r\n    \r\n  });\r\n }\r\n\r\n\r\n\r\n  componentDidMount() {\r\n    //console.log(\"orderpanel : \" + this.props.token);\r\n    console.log(\"here\");\r\n    console.log(this.props.tableServices);\r\n    this.updateServices();\r\n  }\r\n\r\n  render() {\r\n    const {classes,rowsPerPage,page} = this.state;\r\n    const columns = this.columns;\r\n    const rows = this.state.info.services;\r\n    const handleChangePage = this.handleChangePage.bind(this);\r\n    const handleChangeRowsPerPage = this.handleChangeRowsPerPage.bind(this);\r\n    const icons = [];\r\n    icons[\"waiting\"] = <HourglassFull  style={{fontSize:\"40\"}}/>;\r\n    icons[\"served\"] = <CheckBox style={{fontSize:\"40\"}}/>;\r\n    //<CheckBox style={{fontSize:\"40\"}}/>,<AccountBalanceWallet style={{fontSize:\"40\"}}/>,<Face  style={{fontSize:\"40\"}}/>,<HourglassFull  style={{fontSize:\"40\"}}/>\r\n    return (\r\n      <div >\r\n        <TableContainer  className=\"Test2\">\r\n        <Table stickyHeader aria-label=\"sticky table\" >\r\n          <TableHead >\r\n            <TableRow >\r\n              {columns.map((column) => (\r\n                <TableCell\r\n                  key={column.id}\r\n                  align={column.align}\r\n                  style={{ minWidth: column.minWidth }}\r\n                  classes={{\r\n                    root:\"Chart-header-specs\"\r\n                  }}\r\n                >\r\n                  {column.label}\r\n                </TableCell>\r\n              ))}\r\n            </TableRow>\r\n          </TableHead>\r\n          <TableBody  >\r\n            {rows.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage).map((row,index) => {\r\n              return (\r\n                <TableRow hover role=\"checkbox\" tabIndex={-1} key={row.code} >\r\n                  {columns.map((column) => {\r\n                    const value = row[column.id];\r\n                    return (\r\n                      <TableCell key={column.id} align={column.align} >\r\n                        <div className=\"OrderCell\">                                                    \r\n                          {column.format && typeof value === 'number' ? column.format(value) : ((column.id == \"status\")?(icons[value]):(value))}\r\n                          \r\n                        </div>\r\n                      </TableCell>\r\n                    );\r\n                  })}\r\n                </TableRow>\r\n              );\r\n            })}\r\n          </TableBody>\r\n        </Table>\r\n      </TableContainer>\r\n    </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state =>({\r\n  token : state.token,\r\n  user : state.user,\r\n  orders : state.orders\r\n})\r\n\r\nexport default connect(mapStateToProps,null)(MiniServicePanel);\r\n\r\n","C:\\Users\\moguz\\OneDrive\\Masaüstü\\cs491repo\\projectDraft\\react\\qrder\\src\\components\\mainPanels\\ProfileEditPanel.js",["372","373","374","375","376","377","378","379","380","381","382","383","384","385","386","387","388","389","390","391","392","393","394","395","396","397","398","399","400","401","402","403","404","405","406"],"import React from \"react\";\r\nimport { Button, Grid, Paper, Switch, Table, TableBody, TableCell, TableContainer, TableHead, TablePagination, TableRow, TextField, withStyles } from \"@material-ui/core\";\r\nimport { AccountBox,AccountBalanceWallet, AddCircle, Bookmark, CheckBox,  CheckSharp,  Face, Fastfood, HighlightOff, HourglassFull, LocalOffer, Note, LocationOn, Phone, Mail, VpnKey, AccountCircle } from \"@material-ui/icons\";\r\nimport { connect } from \"react-redux\";\r\nimport { addItem, editProfile, getUserInfo, UpdateItem } from \"../../requests/restaurant\";\r\nimport { setDisplayingPanel, setUser } from \"../../redux/actions\";\r\nimport MenuPanel from \"./MenuPanel\";\r\nimport TablePanel from \"./tables/TablePanel\";\r\nimport OrderPanel from \"./OrderPanel\";\r\n\r\nclass ProfileEditPanel extends React.Component {\r\n\r\n    state = {\r\n        loading : false,\r\n        item : {},\r\n        formVariables : [],\r\n        img : null,\r\n        preview:{\r\n            name : \"\",\r\n            address : \"\",\r\n            phoneNumber : \"\",\r\n            email : \"\",\r\n            username : \"\",\r\n            password : \"\",\r\n            type : \"\",\r\n        },\r\n        changes : []\r\n    };\r\n\r\n    editUser = (formVars)=> {\r\n            \r\n        \r\n        var values = {};\r\n        console.log(formVars);\r\n            formVars.map((element)=>{\r\n                if(this.state.changes.indexOf(element.id) != -1){\r\n                    values[element.id] = element.reference.value;\r\n                }\r\n            });\r\n            editProfile(this.props.token,values).then(()=>{\r\n                getUserInfo(this.props.token).then((result)=>{\r\n                    this.props.dispatch(setUser(result));                    \r\n                    this.props.dispatch(setDisplayingPanel(<OrderPanel/>));\r\n                    const event = new Event('user'); \r\n                    document.dispatchEvent(event);\r\n                })\r\n            });\r\n\r\n    }\r\n    handleTypeSwitch = () =>{\r\n        var prev = this.state.preview;\r\n        if(prev.serviceType == \"normal\"){\r\n            prev.serviceType =\"self\";\r\n        }else{\r\n            prev.serviceType = \"normal\";\r\n        }\r\n        this.setState({preview:prev});\r\n    }\r\n\r\n    updateView = () =>{\r\n        var formVariables = [];\r\n        if(this.props.user){\r\n            this.setState({preview:this.props.user});\r\n            formVariables = [            \r\n                {id:\"img\",label : \"image\",type:\"text\",reference : null,default1: this.props.user.img},\r\n                {id:\"name\",label : \"Restaurant Name\",type:\"text\",reference : null,default1: this.props.user.name},\r\n                {id:\"address\",label : \"Address\",type:\"text\",reference : null,default1: this.props.user.address},\r\n                {id:\"phoneNumber\",label : \"Phone Number\",type:\"text\",reference : null,default1: this.props.user.phoneNumber},\r\n                {id:\"email\",label : \"Email\",type:\"text\",reference : null,default1: this.props.user.email},\r\n                {id:\"username\",label : \"Username\",type:\"text\",reference : null,default1: this.props.user.username},\r\n                {id:\"password\",label : \"Password\",type:\"password\",reference : null,default1: this.props.user.password}\r\n            ];\r\n        }else{\r\n            getUserInfo(this.props.token).then((result)=>{\r\n                this.props.dispatch(setUser(result));\r\n                this.setState({preview: result});\r\n                formVariables = [            \r\n                    {id:\"img\",label : \"image\",type:\"text\",reference : null,default1: result.img},\r\n                    {id:\"name\",label : \"Restaurant Name\",type:\"text\",reference : null,default1: result.name},\r\n                    {id:\"address\",label : \"Address\",type:\"text\",reference : null,default1: result.address},\r\n                    {id:\"phoneNumber\",label : \"Phone Number\",type:\"text\",reference : null,default1: result.phoneNumber},\r\n                    {id:\"email\",label : \"Email\",type:\"text\",reference : null,default1: result.email},\r\n                    {id:\"username\",label : \"Username\",type:\"text\",reference : null,default1: result.username},\r\n                    {id:\"password\",label : \"Password\",type:\"password\",reference : null,default1: result.password}\r\n                ];\r\n            });\r\n        }\r\n        \r\n        if(this.props.item){\r\n            console.log(this.props.item);\r\n            this.setState({item : this.props.item})\r\n            formVariables.map((index)=>{index.default = this.props.item[index.id]});\r\n            this.setState({img:this.props.item.img})\r\n        }\r\n        this.setState({formVariables});\r\n    }\r\n    componentDidMount() {\r\n        this.updateView();\r\n    }\r\n\r\n    imageRender = () =>{\r\n        var temp = this.state;\r\n        if(temp.changes.indexOf(\"img\") == -1){\r\n            temp.changes.push(\"img\");\r\n        }\r\n        temp.img = this.state.formVariables[0].reference.value;\r\n        this.setState(temp);\r\n        /*\r\n        console.log(this.state.formVariables[0].reference.value);\r\n        this.setState({img:this.state.formVariables[0].reference.value});*/\r\n    }\r\n\r\n\r\n    changeHandler = (contentId) =>{\r\n        \r\n        var temp = this.state;\r\n        var value = document.getElementById(contentId).value;\r\n       /* if(temp.changes.indexOf(contentId) == -1){\r\n            \r\n            temp.changes.push(contentId);\r\n        }*/\r\n        if(contentId != \"password\"){\r\n            if(temp.changes.indexOf(contentId) == -1){\r\n                \r\n                temp.changes.push(contentId);\r\n            }\r\n        }\r\n        switch (contentId){\r\n            case \"name\":                \r\n                temp.preview.name = value;\r\n                break;\r\n            case \"address\":\r\n                temp.preview.address = value;\r\n                break;\r\n            case \"phone\":\r\n                temp.preview.phoneNumber = value;\r\n                break;\r\n            case \"email\":\r\n                temp.preview.email = value;\r\n                break;\r\n            case \"username\":\r\n                temp.preview.username = value;\r\n                break;\r\n            case \"password\":\r\n                temp.preview.password = value;\r\n                break;\r\n                    \r\n        }\r\n        this.setState(temp);\r\n    }\r\n\r\n    render() {\r\n        const {classes} = this.props;\r\n//        console.log(this.state.formVariables);\r\n\r\n        var formVariables = this.state.formVariables;\r\n\r\n            formVariables.map((index)=>{index.default = this.state.item[index.id]});\r\n            var test = \"test\";\r\n        return (\r\n            <>\r\n            <Grid container spacing={1}>\r\n                    <Grid item xs={6} className=\"GridElement\">\r\n                            <Grid container spacing={1}>\r\n                                \r\n                                <Grid item xs={12} className=\"GridElement\">\r\n                                    <div className=\"BigImage\">\r\n                                        {(this.state.img)?\r\n                                        ( <img  src={this.state.img} width =\"60%\" height =\"100%\"/> ):\r\n                                        (<AccountCircle style={{fontSize:145,color:\"#c4a748d0\"}}/> )}\r\n                                                                               \r\n                                    </div>\r\n                                </Grid>\r\n                                <Grid item xs={12} className=\"GridElement\">\r\n                                    <div className=\"BigTag4\"> \r\n                                        <div style={{textAlign:\"left\",minWidth:\"100%\",fontSize:\"15px\"}}>\r\n                                        <Note/>{this.state.preview.name}<br/>\r\n                                        <LocationOn/>{this.state.preview.address}<br/>\r\n                                        <Phone/>{this.state.preview.phoneNumber}<br/>\r\n                                        <Mail/>{this.state.preview.email}<br/>                                        \r\n                                        <AccountBox/>{this.state.preview.username}<br/>                                        \r\n                                        <VpnKey/>{this.state.preview.password}<br/> \r\n                                        <LocalOffer/>{this.state.preview.serviceType}<span style={{color:\"#000000\",float:\"right\"}}>\r\n                                                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<Switch\r\n                                                color=\"default\"\r\n                                                id = \"registerSwitch\"\r\n                                                onChange={this.handleTypeSwitch}\r\n                                                />\r\n                                        </span>\r\n                                        <br/>                            \r\n                                        </div>                                \r\n                                    </div>\r\n                                </Grid>\r\n                                <Grid item xs={12} className=\"GridElement\">                                   \r\n                                    <span className=\"ButtonLayout\">\r\n                                    <Button\r\n                                        classes={{\r\n                                            root: classes.buttonRoot, // class name, e.g. `classes-nesting-root-x`\r\n                                            label: classes.buttonLabel, // class name, e.g. `classes-nesting-label-x`\r\n                                        }}\r\n                                        onClick={this.editUser.bind(this,formVariables)}\r\n                                    >Update</Button>\r\n                                    </span>\r\n                                </Grid>\r\n                            </Grid>\r\n                            \r\n                    </Grid>\r\n                    <Grid item xs={6} className=\"GridElement\">\r\n                            <div style={{textAlign:\"left\"}}>\r\n                            {formVariables.map((index)=>(\r\n                                (index.id == \"type\")?(<>\r\n                                <div className=\"SelectLabel\">Type</div> \r\n                                <select name=\"type\" id=\"types\" className=\"Select\" onChange={this.typeRender}>\r\n                                    {this.props.menu.map((type)=>(\r\n                                <option id = {type.uuid} value={type.uuid} className=\"Option\">{type.name}</option>))}\r\n                              </select><br/>\r\n                                <br/>\r\n                                </>):(<>\r\n                                    <TextField id={index.id} label = {index.label} \r\n                                    type={index.type}\r\n                                    inputRef={el =>index.reference = el} \r\n                                    className = {classes.main}\r\n                                    defaultValue = {index.default1}\r\n                                    onChange = {(index.id == \"img\") ? (this.imageRender):((index.id == \"metadata\")?(null):(this.changeHandler.bind(this,index.id)))}\r\n                                    InputProps={{\r\n                                            classes:{\r\n                                                input:classes.font\r\n                                            }\r\n                                        }}\r\n                                        InputLabelProps={{\r\n                                            classes:{\r\n                                                root: classes.font,\r\n                                            }\r\n                                        }}\r\n                                    />   {(index.id == \"metadata\")?(<AddCircle style={{paddingTop:\"20px\"}} onClick={this.addMetadata} />):(null)}                          \r\n                                    <br/>\r\n                                    <br/>\r\n                                    </>)\r\n                                \r\n                            ))}\r\n                            \r\n                            </div>                      \r\n                    </Grid>\r\n                </Grid>\r\n           \r\n                </>\r\n        );\r\n    }\r\n}\r\n\r\nconst useStyles = {\r\n    main:{\r\n        '& label.Mui-focused': {\r\n            color: '#c4a748d0',\r\n          },          \r\n    '& .MuiInput-underline:after': {\r\n        borderBottomColor: '#c4a748d0',\r\n      },\r\n    },\r\n    font:{\r\n        color : \"#c4a748d0\",\r\n        '&:-webkit-autofill': {\r\n            transitionDelay: '9999s',\r\n            transitionProperty: 'background-color, color',\r\n          },\r\n    },\r\n    buttonRoot: {\r\n        background: 'linear-gradient(45deg, #c4a748d0 30%, #c4a748d0 90%)',\r\n        borderRadius: 3,\r\n        border: 0,\r\n        color: 'black',\r\n        height: 48,\r\n        padding: '0 30px',\r\n      },\r\n    buttonLabel: {\r\n        textTransform: 'capitalize',\r\n    },\r\n}\r\n\r\n\r\nconst mapStateToProps = state =>({\r\n  token : state.token,\r\n  user : state.user,\r\n  menu : state.menu,\r\n  order : state.test,\r\n  display : state.display\r\n})\r\n\r\nexport default connect(mapStateToProps,null)(withStyles(useStyles)(ProfileEditPanel));\r\n\r\n","C:\\Users\\moguz\\OneDrive\\Masaüstü\\cs491repo\\projectDraft\\react\\qrder\\src\\requests\\order.js",["407"],"var axios = require('axios');\r\n\r\nexport const getSpecificOrder = (token,uuid) =>{\r\n    var config = {\r\n        method: 'get',\r\n        url: `https://qrder-web.herokuapp.com/order?uuid=${uuid}`,\r\n        headers: { \r\n            'Authorization': `Bearer ${token}`\r\n        }\r\n      };\r\n      \r\n      return axios(config)\r\n      .then(function (response) {\r\n        return response.data;\r\n      })\r\n      .catch(function (error) {\r\n        console.log(error);\r\n      });\r\n      \r\n\r\n}\r\n\r\nexport const addOrder = (token,values) =>{\r\n  \r\n  var tempItems = [];\r\n  var data = JSON.stringify({\"restaurantUuid\":values.restaurantUuid,\r\n  \"tableUuid\":values.tableUuid,\r\n  \"items\":values.items});\r\n  console.log(data);\r\n  var config = {\r\n    method: 'post',\r\n    url: 'https://qrder-web.herokuapp.com/order',\r\n    headers: { \r\n      'Content-Type': 'application/json', \r\n      'Authorization': `Bearer ${token}`\r\n    },\r\n    data : data\r\n  };\r\n\r\n  return axios(config)\r\n  .then(function (response) {\r\n    //console.log(JSON.stringify(response.data));\r\n    return response.data;\r\n  })\r\n  .catch(function (error) {\r\n    console.log(error);\r\n  });\r\n\r\n\r\n}\r\n\r\nexport const removeOrder = (token,uuid) =>{\r\n  var data = '';\r\n\r\n  var config = {\r\n    method: 'delete',\r\n    url: `https://qrder-web.herokuapp.com/order?uuid=${uuid}`,\r\n    headers: { \r\n      'Content-Type': 'application/json',     \r\n      'Authorization': `Bearer ${token}`\r\n    },\r\n    data : data\r\n  };\r\n  \r\n  return axios(config)\r\n  .then(function (response) {\r\n    //console.log(JSON.stringify(response.data));\r\n    return response;\r\n  })\r\n  .catch(function (error) {\r\n    console.log(error);\r\n  });\r\n}\r\n\r\nexport const serveOrder = (token,uuid) =>{\r\n  var data = JSON.stringify({\"status\":\"served\"});\r\n\r\n  var config = {\r\n    method: 'post',\r\n    url: `https://qrder-web.herokuapp.com/order?uuid=${uuid}`,\r\n    headers: { \r\n      'Content-Type': 'application/json',   \r\n      'Authorization': `Bearer ${token}`\r\n    },\r\n    data : data\r\n  };\r\n\r\n  return axios(config)\r\n  .then(function (response) {\r\n    return response;\r\n  })\r\n  .catch(function (error) {\r\n    console.log(error);\r\n  });\r\n}\r\n\r\nexport const payOrder = (token , uuid) =>{\r\n  var qs = require('qs');\r\n  var data = qs.stringify({\r\n    \r\n  });\r\n  var config = {\r\n    method: 'post',\r\n    url: `https://qrder-web.herokuapp.com/order/pay?uuid=${uuid}`,\r\n    headers: { \r\n      'Authorization': `Bearer ${token}`\r\n    },\r\n    data : data\r\n  };\r\n\r\n  return axios(config)\r\n  .then(function (response) {\r\n    return response;\r\n  })\r\n  .catch(function (error) {\r\n    console.log(error);\r\n  });\r\n}\r\n\r\n","C:\\Users\\moguz\\OneDrive\\Masaüstü\\cs491repo\\projectDraft\\react\\qrder\\src\\mqtt\\client.js",["408","409","410","411"],"import { addService } from \"../requests/restaurant\";\r\n\r\nvar mqtt = require(\"mqtt\");\r\n\r\nconst resClient = {\r\n  client : null,\r\n  connected : false,\r\n  clientId : null\r\n}\r\n\r\n\r\nresClient.init = (token,uuid)=>{\r\n  if(resClient.connected){\r\n    return;\r\n  }\r\n  resClient.client = mqtt.connect(\"wss://hairdresser.cloudmqtt.com:35697\", {\r\n      username: \"qgetbbky\",\r\n      password: \"F7AMZy_xADKj\",\r\n      keepalive: 0,\r\n      clean: false,\r\n      clientId: token    \r\n  });\r\n  resClient.client.on('connect', () => {\r\n    console.log('Heroku Docker Server is connected to MQTT broker');\r\n    resClient.connected = true;\r\n    var topic = 'restaurant/' + uuid + '/#' \r\n    resClient.client.on(\"message\",(topic,message) =>{\r\n      console.log(\"mqtt : \" + message);\r\n      if(message.toString() == \"table\"){\r\n        const event = new Event('table'); \r\n        document.dispatchEvent(event);\r\n      }else if(message.toString() == \"order\"){\r\n        const event = new Event('order'); \r\n        document.dispatchEvent(event);\r\n      }else{\r\n        var parsedMessage = message.toString().split(\":\");\r\n        if(parsedMessage.length == 2 && parsedMessage[0] == \"service\"){\r\n          var table = topic.split(\"/\")[2];\r\n          addService(token,parsedMessage[1],table).then(()=>{            \r\n            const event = new Event('table'); \r\n            document.dispatchEvent(event);\r\n          });\r\n          /*const event = new CustomEvent(\"service\",{detail:{type:parsedMessage[1],table:table}});\r\n          document.dispatchEvent(event);*/\r\n        }\r\n      }\r\n    });\r\n    resClient.client.subscribe(topic, (err) => {      \r\n      if (err) {\r\n        console.log('[error]:', err);\r\n        return;\r\n      }\r\n    });\r\n  });\r\n      \r\n}\r\n\r\nexport default resClient;\r\n\r\n",{"ruleId":"412","replacedBy":"413"},{"ruleId":"414","replacedBy":"415"},{"ruleId":"412","replacedBy":"416"},{"ruleId":"414","replacedBy":"417"},{"ruleId":"418","severity":1,"message":"419","line":2,"column":8,"nodeType":"420","messageId":"421","endLine":2,"endColumn":12},{"ruleId":"418","severity":1,"message":"422","line":4,"column":23,"nodeType":"420","messageId":"421","endLine":4,"endColumn":34},{"ruleId":"418","severity":1,"message":"423","line":5,"column":49,"nodeType":"420","messageId":"421","endLine":5,"endColumn":53},{"ruleId":"418","severity":1,"message":"424","line":7,"column":8,"nodeType":"420","messageId":"421","endLine":7,"endColumn":18},{"ruleId":"418","severity":1,"message":"425","line":8,"column":10,"nodeType":"420","messageId":"421","endLine":8,"endColumn":21},{"ruleId":"418","severity":1,"message":"426","line":8,"column":23,"nodeType":"420","messageId":"421","endLine":8,"endColumn":33},{"ruleId":"418","severity":1,"message":"427","line":10,"column":10,"nodeType":"420","messageId":"421","endLine":10,"endColumn":19},{"ruleId":"418","severity":1,"message":"428","line":3,"column":44,"nodeType":"420","messageId":"421","endLine":3,"endColumn":56},{"ruleId":"418","severity":1,"message":"429","line":2,"column":17,"nodeType":"420","messageId":"421","endLine":2,"endColumn":26},{"ruleId":"418","severity":1,"message":"430","line":20,"column":9,"nodeType":"420","messageId":"421","endLine":20,"endColumn":21},{"ruleId":"431","severity":1,"message":"432","line":29,"column":24,"nodeType":"433","messageId":"434","endLine":29,"endColumn":26},{"ruleId":"431","severity":1,"message":"432","line":29,"column":38,"nodeType":"433","messageId":"434","endLine":29,"endColumn":40},{"ruleId":"418","severity":1,"message":"435","line":3,"column":19,"nodeType":"420","messageId":"421","endLine":3,"endColumn":30},{"ruleId":"418","severity":1,"message":"424","line":8,"column":8,"nodeType":"420","messageId":"421","endLine":8,"endColumn":18},{"ruleId":"431","severity":1,"message":"436","line":42,"column":17,"nodeType":"433","messageId":"434","endLine":42,"endColumn":19},{"ruleId":"431","severity":1,"message":"436","line":81,"column":82,"nodeType":"433","messageId":"434","endLine":81,"endColumn":84},{"ruleId":"418","severity":1,"message":"437","line":108,"column":10,"nodeType":"420","messageId":"421","endLine":108,"endColumn":18},{"ruleId":"418","severity":1,"message":"438","line":6,"column":52,"nodeType":"420","messageId":"421","endLine":6,"endColumn":60},{"ruleId":"418","severity":1,"message":"439","line":26,"column":22,"nodeType":"420","messageId":"421","endLine":26,"endColumn":27},{"ruleId":"440","severity":1,"message":"441","line":36,"column":7,"nodeType":"442","messageId":"443","endLine":39,"endColumn":15},{"ruleId":"418","severity":1,"message":"439","line":96,"column":22,"nodeType":"420","messageId":"421","endLine":96,"endColumn":27},{"ruleId":"444","severity":1,"message":"445","line":113,"column":41,"nodeType":"446","endLine":113,"endColumn":91},{"ruleId":"447","severity":1,"message":"448","line":138,"column":60,"nodeType":"449","messageId":"450","endLine":138,"endColumn":61},{"ruleId":"418","severity":1,"message":"451","line":184,"column":7,"nodeType":"420","messageId":"421","endLine":184,"endColumn":18},{"ruleId":"418","severity":1,"message":"452","line":6,"column":8,"nodeType":"420","messageId":"421","endLine":6,"endColumn":16},{"ruleId":"418","severity":1,"message":"453","line":7,"column":10,"nodeType":"420","messageId":"421","endLine":7,"endColumn":28},{"ruleId":"431","severity":1,"message":"436","line":54,"column":42,"nodeType":"433","messageId":"434","endLine":54,"endColumn":44},{"ruleId":"431","severity":1,"message":"436","line":78,"column":35,"nodeType":"433","messageId":"434","endLine":78,"endColumn":37},{"ruleId":"431","severity":1,"message":"436","line":135,"column":78,"nodeType":"433","messageId":"434","endLine":135,"endColumn":80},{"ruleId":"454","severity":1,"message":"455","line":138,"column":41,"nodeType":"446","endLine":138,"endColumn":96},{"ruleId":"418","severity":1,"message":"456","line":2,"column":10,"nodeType":"420","messageId":"421","endLine":2,"endColumn":15},{"ruleId":"418","severity":1,"message":"457","line":3,"column":10,"nodeType":"420","messageId":"421","endLine":3,"endColumn":30},{"ruleId":"418","severity":1,"message":"458","line":3,"column":57,"nodeType":"420","messageId":"421","endLine":3,"endColumn":61},{"ruleId":"459","severity":1,"message":"460","line":96,"column":27,"nodeType":"461","messageId":"462","endLine":96,"endColumn":29},{"ruleId":"431","severity":1,"message":"436","line":100,"column":36,"nodeType":"433","messageId":"434","endLine":100,"endColumn":38},{"ruleId":"431","severity":1,"message":"436","line":111,"column":33,"nodeType":"433","messageId":"434","endLine":111,"endColumn":35},{"ruleId":"418","severity":1,"message":"463","line":131,"column":12,"nodeType":"420","messageId":"421","endLine":131,"endColumn":19},{"ruleId":"431","severity":1,"message":"436","line":169,"column":54,"nodeType":"433","messageId":"434","endLine":169,"endColumn":56},{"ruleId":"431","severity":1,"message":"436","line":169,"column":79,"nodeType":"433","messageId":"434","endLine":169,"endColumn":81},{"ruleId":"431","severity":1,"message":"436","line":169,"column":197,"nodeType":"433","messageId":"434","endLine":169,"endColumn":199},{"ruleId":"431","severity":1,"message":"436","line":171,"column":108,"nodeType":"433","messageId":"434","endLine":171,"endColumn":110},{"ruleId":"431","severity":1,"message":"436","line":171,"column":146,"nodeType":"433","messageId":"434","endLine":171,"endColumn":148},{"ruleId":"431","severity":1,"message":"436","line":171,"column":170,"nodeType":"433","messageId":"434","endLine":171,"endColumn":172},{"ruleId":"418","severity":1,"message":"435","line":3,"column":19,"nodeType":"420","messageId":"421","endLine":3,"endColumn":30},{"ruleId":"431","severity":1,"message":"436","line":58,"column":32,"nodeType":"433","messageId":"434","endLine":58,"endColumn":34},{"ruleId":"431","severity":1,"message":"436","line":115,"column":25,"nodeType":"433","messageId":"434","endLine":115,"endColumn":27},{"ruleId":"418","severity":1,"message":"464","line":2,"column":10,"nodeType":"420","messageId":"421","endLine":2,"endColumn":16},{"ruleId":"418","severity":1,"message":"456","line":2,"column":18,"nodeType":"420","messageId":"421","endLine":2,"endColumn":23},{"ruleId":"418","severity":1,"message":"465","line":2,"column":81,"nodeType":"420","messageId":"421","endLine":2,"endColumn":96},{"ruleId":"418","severity":1,"message":"466","line":2,"column":109,"nodeType":"420","messageId":"421","endLine":2,"endColumn":118},{"ruleId":"418","severity":1,"message":"457","line":3,"column":10,"nodeType":"420","messageId":"421","endLine":3,"endColumn":30},{"ruleId":"418","severity":1,"message":"467","line":3,"column":32,"nodeType":"420","messageId":"421","endLine":3,"endColumn":40},{"ruleId":"418","severity":1,"message":"468","line":3,"column":42,"nodeType":"420","messageId":"421","endLine":3,"endColumn":46},{"ruleId":"418","severity":1,"message":"458","line":3,"column":48,"nodeType":"420","messageId":"421","endLine":3,"endColumn":52},{"ruleId":"418","severity":1,"message":"469","line":3,"column":54,"nodeType":"420","messageId":"421","endLine":3,"endColumn":66},{"ruleId":"418","severity":1,"message":"470","line":3,"column":68,"nodeType":"420","messageId":"421","endLine":3,"endColumn":81},{"ruleId":"418","severity":1,"message":"471","line":5,"column":48,"nodeType":"420","messageId":"421","endLine":5,"endColumn":61},{"ruleId":"418","severity":1,"message":"472","line":6,"column":39,"nodeType":"420","messageId":"421","endLine":6,"endColumn":48},{"ruleId":"418","severity":1,"message":"473","line":6,"column":50,"nodeType":"420","messageId":"421","endLine":6,"endColumn":57},{"ruleId":"418","severity":1,"message":"474","line":7,"column":10,"nodeType":"420","messageId":"421","endLine":7,"endColumn":27},{"ruleId":"418","severity":1,"message":"463","line":139,"column":12,"nodeType":"420","messageId":"421","endLine":139,"endColumn":19},{"ruleId":"418","severity":1,"message":"475","line":143,"column":11,"nodeType":"420","messageId":"421","endLine":143,"endColumn":27},{"ruleId":"418","severity":1,"message":"476","line":144,"column":11,"nodeType":"420","messageId":"421","endLine":144,"endColumn":34},{"ruleId":"418","severity":1,"message":"477","line":181,"column":27,"nodeType":"420","messageId":"421","endLine":181,"endColumn":32},{"ruleId":"418","severity":1,"message":"456","line":2,"column":24,"nodeType":"420","messageId":"421","endLine":2,"endColumn":29},{"ruleId":"418","severity":1,"message":"478","line":2,"column":31,"nodeType":"420","messageId":"421","endLine":2,"endColumn":36},{"ruleId":"418","severity":1,"message":"479","line":2,"column":38,"nodeType":"420","messageId":"421","endLine":2,"endColumn":47},{"ruleId":"418","severity":1,"message":"480","line":2,"column":49,"nodeType":"420","messageId":"421","endLine":2,"endColumn":58},{"ruleId":"418","severity":1,"message":"481","line":2,"column":60,"nodeType":"420","messageId":"421","endLine":2,"endColumn":74},{"ruleId":"418","severity":1,"message":"482","line":2,"column":76,"nodeType":"420","messageId":"421","endLine":2,"endColumn":85},{"ruleId":"418","severity":1,"message":"465","line":2,"column":87,"nodeType":"420","messageId":"421","endLine":2,"endColumn":102},{"ruleId":"418","severity":1,"message":"483","line":2,"column":104,"nodeType":"420","messageId":"421","endLine":2,"endColumn":112},{"ruleId":"418","severity":1,"message":"457","line":3,"column":10,"nodeType":"420","messageId":"421","endLine":3,"endColumn":30},{"ruleId":"418","severity":1,"message":"467","line":3,"column":53,"nodeType":"420","messageId":"421","endLine":3,"endColumn":61},{"ruleId":"418","severity":1,"message":"458","line":3,"column":77,"nodeType":"420","messageId":"421","endLine":3,"endColumn":81},{"ruleId":"418","severity":1,"message":"470","line":3,"column":107,"nodeType":"420","messageId":"421","endLine":3,"endColumn":120},{"ruleId":"418","severity":1,"message":"471","line":5,"column":32,"nodeType":"420","messageId":"421","endLine":5,"endColumn":45},{"ruleId":"459","severity":1,"message":"460","line":76,"column":38,"nodeType":"461","messageId":"462","endLine":76,"endColumn":40},{"ruleId":"431","severity":1,"message":"436","line":78,"column":39,"nodeType":"433","messageId":"434","endLine":78,"endColumn":41},{"ruleId":"459","severity":1,"message":"460","line":87,"column":64,"nodeType":"461","messageId":"462","endLine":87,"endColumn":66},{"ruleId":"484","severity":1,"message":"485","line":113,"column":17,"nodeType":"420","messageId":"486","endLine":113,"endColumn":21},{"ruleId":"487","severity":1,"message":"488","line":165,"column":9,"nodeType":"489","messageId":"490","endLine":175,"endColumn":10},{"ruleId":"459","severity":1,"message":"460","line":185,"column":38,"nodeType":"461","messageId":"462","endLine":185,"endColumn":40},{"ruleId":"418","severity":1,"message":"491","line":186,"column":17,"nodeType":"420","messageId":"421","endLine":186,"endColumn":21},{"ruleId":"444","severity":1,"message":"445","line":195,"column":41,"nodeType":"446","endLine":195,"endColumn":97},{"ruleId":"431","severity":1,"message":"436","line":242,"column":43,"nodeType":"433","messageId":"434","endLine":242,"endColumn":45},{"ruleId":"431","severity":1,"message":"436","line":258,"column":59,"nodeType":"433","messageId":"434","endLine":258,"endColumn":61},{"ruleId":"431","severity":1,"message":"436","line":258,"column":101,"nodeType":"433","messageId":"434","endLine":258,"endColumn":103},{"ruleId":"431","severity":1,"message":"436","line":269,"column":53,"nodeType":"433","messageId":"434","endLine":269,"endColumn":55},{"ruleId":"492","severity":1,"message":"493","line":99,"column":9,"nodeType":"494","messageId":"434","endLine":99,"endColumn":15},{"ruleId":"418","severity":1,"message":"456","line":2,"column":24,"nodeType":"420","messageId":"421","endLine":2,"endColumn":29},{"ruleId":"418","severity":1,"message":"465","line":2,"column":87,"nodeType":"420","messageId":"421","endLine":2,"endColumn":102},{"ruleId":"418","severity":1,"message":"457","line":3,"column":10,"nodeType":"420","messageId":"421","endLine":3,"endColumn":30},{"ruleId":"418","severity":1,"message":"495","line":3,"column":32,"nodeType":"420","messageId":"421","endLine":3,"endColumn":41},{"ruleId":"418","severity":1,"message":"467","line":3,"column":43,"nodeType":"420","messageId":"421","endLine":3,"endColumn":51},{"ruleId":"418","severity":1,"message":"468","line":3,"column":53,"nodeType":"420","messageId":"421","endLine":3,"endColumn":57},{"ruleId":"418","severity":1,"message":"458","line":3,"column":59,"nodeType":"420","messageId":"421","endLine":3,"endColumn":63},{"ruleId":"418","severity":1,"message":"470","line":3,"column":65,"nodeType":"420","messageId":"421","endLine":3,"endColumn":78},{"ruleId":"418","severity":1,"message":"496","line":6,"column":8,"nodeType":"420","messageId":"421","endLine":6,"endColumn":24},{"ruleId":"431","severity":1,"message":"436","line":53,"column":43,"nodeType":"433","messageId":"434","endLine":53,"endColumn":45},{"ruleId":"431","severity":1,"message":"436","line":54,"column":42,"nodeType":"433","messageId":"434","endLine":54,"endColumn":44},{"ruleId":"431","severity":1,"message":"436","line":55,"column":42,"nodeType":"433","messageId":"434","endLine":55,"endColumn":44},{"ruleId":"431","severity":1,"message":"436","line":56,"column":45,"nodeType":"433","messageId":"434","endLine":56,"endColumn":47},{"ruleId":"431","severity":1,"message":"436","line":57,"column":44,"nodeType":"433","messageId":"434","endLine":57,"endColumn":46},{"ruleId":"431","severity":1,"message":"436","line":59,"column":61,"nodeType":"433","messageId":"434","endLine":59,"endColumn":63},{"ruleId":"431","severity":1,"message":"436","line":59,"column":124,"nodeType":"433","messageId":"434","endLine":59,"endColumn":126},{"ruleId":"431","severity":1,"message":"436","line":60,"column":44,"nodeType":"433","messageId":"434","endLine":60,"endColumn":46},{"ruleId":"431","severity":1,"message":"436","line":61,"column":44,"nodeType":"433","messageId":"434","endLine":61,"endColumn":46},{"ruleId":"431","severity":1,"message":"436","line":61,"column":101,"nodeType":"433","messageId":"434","endLine":61,"endColumn":103},{"ruleId":"431","severity":1,"message":"436","line":84,"column":36,"nodeType":"433","messageId":"434","endLine":84,"endColumn":38},{"ruleId":"431","severity":1,"message":"436","line":90,"column":42,"nodeType":"433","messageId":"434","endLine":90,"endColumn":44},{"ruleId":"459","severity":1,"message":"460","line":99,"column":38,"nodeType":"461","messageId":"462","endLine":99,"endColumn":40},{"ruleId":"459","severity":1,"message":"460","line":102,"column":42,"nodeType":"461","messageId":"462","endLine":102,"endColumn":44},{"ruleId":"459","severity":1,"message":"460","line":135,"column":32,"nodeType":"461","messageId":"462","endLine":135,"endColumn":34},{"ruleId":"431","severity":1,"message":"436","line":137,"column":51,"nodeType":"433","messageId":"434","endLine":137,"endColumn":53},{"ruleId":"431","severity":1,"message":"436","line":138,"column":50,"nodeType":"433","messageId":"434","endLine":138,"endColumn":52},{"ruleId":"431","severity":1,"message":"436","line":139,"column":50,"nodeType":"433","messageId":"434","endLine":139,"endColumn":52},{"ruleId":"431","severity":1,"message":"436","line":140,"column":53,"nodeType":"433","messageId":"434","endLine":140,"endColumn":55},{"ruleId":"431","severity":1,"message":"436","line":141,"column":52,"nodeType":"433","messageId":"434","endLine":141,"endColumn":54},{"ruleId":"431","severity":1,"message":"436","line":143,"column":69,"nodeType":"433","messageId":"434","endLine":143,"endColumn":71},{"ruleId":"431","severity":1,"message":"436","line":143,"column":132,"nodeType":"433","messageId":"434","endLine":143,"endColumn":134},{"ruleId":"431","severity":1,"message":"436","line":144,"column":52,"nodeType":"433","messageId":"434","endLine":144,"endColumn":54},{"ruleId":"431","severity":1,"message":"436","line":145,"column":52,"nodeType":"433","messageId":"434","endLine":145,"endColumn":54},{"ruleId":"431","severity":1,"message":"436","line":145,"column":109,"nodeType":"433","messageId":"434","endLine":145,"endColumn":111},{"ruleId":"431","severity":1,"message":"436","line":159,"column":33,"nodeType":"433","messageId":"434","endLine":159,"endColumn":35},{"ruleId":"418","severity":1,"message":"475","line":189,"column":11,"nodeType":"420","messageId":"421","endLine":189,"endColumn":27},{"ruleId":"418","severity":1,"message":"476","line":190,"column":11,"nodeType":"420","messageId":"421","endLine":190,"endColumn":34},{"ruleId":"418","severity":1,"message":"477","line":236,"column":57,"nodeType":"420","messageId":"421","endLine":236,"endColumn":62},{"ruleId":"431","severity":1,"message":"436","line":272,"column":94,"nodeType":"433","messageId":"434","endLine":272,"endColumn":96},{"ruleId":"418","severity":1,"message":"456","line":2,"column":10,"nodeType":"420","messageId":"421","endLine":2,"endColumn":15},{"ruleId":"418","severity":1,"message":"465","line":2,"column":73,"nodeType":"420","messageId":"421","endLine":2,"endColumn":88},{"ruleId":"418","severity":1,"message":"457","line":3,"column":10,"nodeType":"420","messageId":"421","endLine":3,"endColumn":30},{"ruleId":"418","severity":1,"message":"467","line":3,"column":39,"nodeType":"420","messageId":"421","endLine":3,"endColumn":47},{"ruleId":"418","severity":1,"message":"497","line":3,"column":49,"nodeType":"420","messageId":"421","endLine":3,"endColumn":60},{"ruleId":"418","severity":1,"message":"468","line":3,"column":82,"nodeType":"420","messageId":"421","endLine":3,"endColumn":86},{"ruleId":"418","severity":1,"message":"458","line":3,"column":88,"nodeType":"420","messageId":"421","endLine":3,"endColumn":92},{"ruleId":"418","severity":1,"message":"470","line":3,"column":108,"nodeType":"420","messageId":"421","endLine":3,"endColumn":121},{"ruleId":"418","severity":1,"message":"463","line":119,"column":12,"nodeType":"420","messageId":"421","endLine":119,"endColumn":19},{"ruleId":"418","severity":1,"message":"475","line":122,"column":11,"nodeType":"420","messageId":"421","endLine":122,"endColumn":27},{"ruleId":"418","severity":1,"message":"476","line":123,"column":11,"nodeType":"420","messageId":"421","endLine":123,"endColumn":34},{"ruleId":"431","severity":1,"message":"436","line":152,"column":91,"nodeType":"433","messageId":"434","endLine":152,"endColumn":93},{"ruleId":"431","severity":1,"message":"436","line":153,"column":37,"nodeType":"433","messageId":"434","endLine":153,"endColumn":39},{"ruleId":"431","severity":1,"message":"436","line":154,"column":36,"nodeType":"433","messageId":"434","endLine":154,"endColumn":38},{"ruleId":"418","severity":1,"message":"456","line":2,"column":10,"nodeType":"420","messageId":"421","endLine":2,"endColumn":15},{"ruleId":"418","severity":1,"message":"465","line":2,"column":73,"nodeType":"420","messageId":"421","endLine":2,"endColumn":88},{"ruleId":"418","severity":1,"message":"457","line":3,"column":10,"nodeType":"420","messageId":"421","endLine":3,"endColumn":30},{"ruleId":"418","severity":1,"message":"467","line":3,"column":43,"nodeType":"420","messageId":"421","endLine":3,"endColumn":51},{"ruleId":"418","severity":1,"message":"468","line":3,"column":53,"nodeType":"420","messageId":"421","endLine":3,"endColumn":57},{"ruleId":"418","severity":1,"message":"458","line":3,"column":59,"nodeType":"420","messageId":"421","endLine":3,"endColumn":63},{"ruleId":"418","severity":1,"message":"469","line":3,"column":65,"nodeType":"420","messageId":"421","endLine":3,"endColumn":77},{"ruleId":"418","severity":1,"message":"470","line":3,"column":79,"nodeType":"420","messageId":"421","endLine":3,"endColumn":92},{"ruleId":"418","severity":1,"message":"463","line":101,"column":12,"nodeType":"420","messageId":"421","endLine":101,"endColumn":19},{"ruleId":"418","severity":1,"message":"475","line":104,"column":11,"nodeType":"420","messageId":"421","endLine":104,"endColumn":27},{"ruleId":"418","severity":1,"message":"476","line":105,"column":11,"nodeType":"420","messageId":"421","endLine":105,"endColumn":34},{"ruleId":"431","severity":1,"message":"436","line":134,"column":91,"nodeType":"433","messageId":"434","endLine":134,"endColumn":93},{"ruleId":"431","severity":1,"message":"436","line":135,"column":37,"nodeType":"433","messageId":"434","endLine":135,"endColumn":39},{"ruleId":"431","severity":1,"message":"436","line":136,"column":36,"nodeType":"433","messageId":"434","endLine":136,"endColumn":38},{"ruleId":"418","severity":1,"message":"453","line":6,"column":10,"nodeType":"420","messageId":"421","endLine":6,"endColumn":28},{"ruleId":"418","severity":1,"message":"423","line":6,"column":41,"nodeType":"420","messageId":"421","endLine":6,"endColumn":45},{"ruleId":"418","severity":1,"message":"498","line":8,"column":8,"nodeType":"420","messageId":"421","endLine":8,"endColumn":17},{"ruleId":"459","severity":1,"message":"460","line":34,"column":64,"nodeType":"461","messageId":"462","endLine":34,"endColumn":66},{"ruleId":"487","severity":1,"message":"488","line":35,"column":25,"nodeType":"489","messageId":"490","endLine":42,"endColumn":26},{"ruleId":"459","severity":1,"message":"460","line":51,"column":40,"nodeType":"461","messageId":"462","endLine":51,"endColumn":42},{"ruleId":"431","severity":1,"message":"436","line":52,"column":37,"nodeType":"433","messageId":"434","endLine":52,"endColumn":39},{"ruleId":"431","severity":1,"message":"436","line":92,"column":23,"nodeType":"433","messageId":"434","endLine":92,"endColumn":25},{"ruleId":"431","severity":1,"message":"436","line":107,"column":15,"nodeType":"433","messageId":"434","endLine":107,"endColumn":17},{"ruleId":"418","severity":1,"message":"456","line":2,"column":24,"nodeType":"420","messageId":"421","endLine":2,"endColumn":29},{"ruleId":"418","severity":1,"message":"480","line":2,"column":49,"nodeType":"420","messageId":"421","endLine":2,"endColumn":58},{"ruleId":"418","severity":1,"message":"482","line":2,"column":76,"nodeType":"420","messageId":"421","endLine":2,"endColumn":85},{"ruleId":"418","severity":1,"message":"465","line":2,"column":87,"nodeType":"420","messageId":"421","endLine":2,"endColumn":102},{"ruleId":"418","severity":1,"message":"457","line":3,"column":10,"nodeType":"420","messageId":"421","endLine":3,"endColumn":30},{"ruleId":"418","severity":1,"message":"495","line":3,"column":32,"nodeType":"420","messageId":"421","endLine":3,"endColumn":41},{"ruleId":"418","severity":1,"message":"467","line":3,"column":43,"nodeType":"420","messageId":"421","endLine":3,"endColumn":51},{"ruleId":"418","severity":1,"message":"468","line":3,"column":53,"nodeType":"420","messageId":"421","endLine":3,"endColumn":57},{"ruleId":"418","severity":1,"message":"458","line":3,"column":59,"nodeType":"420","messageId":"421","endLine":3,"endColumn":63},{"ruleId":"418","severity":1,"message":"470","line":3,"column":65,"nodeType":"420","messageId":"421","endLine":3,"endColumn":78},{"ruleId":"418","severity":1,"message":"499","line":5,"column":30,"nodeType":"420","messageId":"421","endLine":5,"endColumn":37},{"ruleId":"418","severity":1,"message":"496","line":6,"column":8,"nodeType":"420","messageId":"421","endLine":6,"endColumn":24},{"ruleId":"418","severity":1,"message":"500","line":7,"column":10,"nodeType":"420","messageId":"421","endLine":7,"endColumn":20},{"ruleId":"418","severity":1,"message":"501","line":7,"column":22,"nodeType":"420","messageId":"421","endLine":7,"endColumn":35},{"ruleId":"418","severity":1,"message":"502","line":7,"column":50,"nodeType":"420","messageId":"421","endLine":7,"endColumn":61},{"ruleId":"418","severity":1,"message":"503","line":8,"column":8,"nodeType":"420","messageId":"421","endLine":8,"endColumn":21},{"ruleId":"431","severity":1,"message":"436","line":58,"column":43,"nodeType":"433","messageId":"434","endLine":58,"endColumn":45},{"ruleId":"431","severity":1,"message":"436","line":59,"column":42,"nodeType":"433","messageId":"434","endLine":59,"endColumn":44},{"ruleId":"431","severity":1,"message":"436","line":60,"column":42,"nodeType":"433","messageId":"434","endLine":60,"endColumn":44},{"ruleId":"431","severity":1,"message":"436","line":61,"column":45,"nodeType":"433","messageId":"434","endLine":61,"endColumn":47},{"ruleId":"431","severity":1,"message":"436","line":62,"column":44,"nodeType":"433","messageId":"434","endLine":62,"endColumn":46},{"ruleId":"431","severity":1,"message":"436","line":64,"column":61,"nodeType":"433","messageId":"434","endLine":64,"endColumn":63},{"ruleId":"431","severity":1,"message":"436","line":64,"column":124,"nodeType":"433","messageId":"434","endLine":64,"endColumn":126},{"ruleId":"431","severity":1,"message":"436","line":65,"column":44,"nodeType":"433","messageId":"434","endLine":65,"endColumn":46},{"ruleId":"431","severity":1,"message":"436","line":66,"column":44,"nodeType":"433","messageId":"434","endLine":66,"endColumn":46},{"ruleId":"431","severity":1,"message":"436","line":66,"column":101,"nodeType":"433","messageId":"434","endLine":66,"endColumn":103},{"ruleId":"418","severity":1,"message":"504","line":127,"column":12,"nodeType":"420","messageId":"421","endLine":127,"endColumn":23},{"ruleId":"418","severity":1,"message":"505","line":127,"column":24,"nodeType":"420","messageId":"421","endLine":127,"endColumn":28},{"ruleId":"418","severity":1,"message":"475","line":128,"column":11,"nodeType":"420","messageId":"421","endLine":128,"endColumn":27},{"ruleId":"418","severity":1,"message":"476","line":129,"column":11,"nodeType":"420","messageId":"421","endLine":129,"endColumn":34},{"ruleId":"454","severity":1,"message":"455","line":149,"column":51,"nodeType":"446","endLine":149,"endColumn":106},{"ruleId":"418","severity":1,"message":"456","line":2,"column":10,"nodeType":"420","messageId":"421","endLine":2,"endColumn":15},{"ruleId":"418","severity":1,"message":"465","line":2,"column":73,"nodeType":"420","messageId":"421","endLine":2,"endColumn":88},{"ruleId":"418","severity":1,"message":"458","line":3,"column":57,"nodeType":"420","messageId":"421","endLine":3,"endColumn":61},{"ruleId":"418","severity":1,"message":"471","line":5,"column":10,"nodeType":"420","messageId":"421","endLine":5,"endColumn":23},{"ruleId":"418","severity":1,"message":"472","line":6,"column":30,"nodeType":"420","messageId":"421","endLine":6,"endColumn":39},{"ruleId":"459","severity":1,"message":"460","line":97,"column":39,"nodeType":"461","messageId":"462","endLine":97,"endColumn":41},{"ruleId":"431","severity":1,"message":"432","line":100,"column":30,"nodeType":"433","messageId":"434","endLine":100,"endColumn":32},{"ruleId":"431","severity":1,"message":"436","line":107,"column":48,"nodeType":"433","messageId":"434","endLine":107,"endColumn":50},{"ruleId":"418","severity":1,"message":"463","line":129,"column":12,"nodeType":"420","messageId":"421","endLine":129,"endColumn":19},{"ruleId":"418","severity":1,"message":"475","line":132,"column":11,"nodeType":"420","messageId":"421","endLine":132,"endColumn":27},{"ruleId":"418","severity":1,"message":"476","line":133,"column":11,"nodeType":"420","messageId":"421","endLine":133,"endColumn":34},{"ruleId":"431","severity":1,"message":"436","line":165,"column":91,"nodeType":"433","messageId":"434","endLine":165,"endColumn":93},{"ruleId":"431","severity":1,"message":"436","line":167,"column":108,"nodeType":"433","messageId":"434","endLine":167,"endColumn":110},{"ruleId":"418","severity":1,"message":"456","line":2,"column":10,"nodeType":"420","messageId":"421","endLine":2,"endColumn":15},{"ruleId":"418","severity":1,"message":"465","line":2,"column":73,"nodeType":"420","messageId":"421","endLine":2,"endColumn":88},{"ruleId":"418","severity":1,"message":"506","line":3,"column":60,"nodeType":"420","messageId":"421","endLine":3,"endColumn":73},{"ruleId":"418","severity":1,"message":"471","line":5,"column":25,"nodeType":"420","messageId":"421","endLine":5,"endColumn":38},{"ruleId":"418","severity":1,"message":"472","line":6,"column":10,"nodeType":"420","messageId":"421","endLine":6,"endColumn":19},{"ruleId":"459","severity":1,"message":"460","line":56,"column":51,"nodeType":"461","messageId":"462","endLine":56,"endColumn":53},{"ruleId":"459","severity":1,"message":"460","line":91,"column":49,"nodeType":"461","messageId":"462","endLine":91,"endColumn":51},{"ruleId":"418","severity":1,"message":"463","line":126,"column":12,"nodeType":"420","messageId":"421","endLine":126,"endColumn":19},{"ruleId":"418","severity":1,"message":"475","line":129,"column":11,"nodeType":"420","messageId":"421","endLine":129,"endColumn":27},{"ruleId":"418","severity":1,"message":"476","line":130,"column":11,"nodeType":"420","messageId":"421","endLine":130,"endColumn":34},{"ruleId":"431","severity":1,"message":"436","line":164,"column":108,"nodeType":"433","messageId":"434","endLine":164,"endColumn":110},{"ruleId":"418","severity":1,"message":"456","line":2,"column":24,"nodeType":"420","messageId":"421","endLine":2,"endColumn":29},{"ruleId":"418","severity":1,"message":"478","line":2,"column":39,"nodeType":"420","messageId":"421","endLine":2,"endColumn":44},{"ruleId":"418","severity":1,"message":"479","line":2,"column":46,"nodeType":"420","messageId":"421","endLine":2,"endColumn":55},{"ruleId":"418","severity":1,"message":"480","line":2,"column":57,"nodeType":"420","messageId":"421","endLine":2,"endColumn":66},{"ruleId":"418","severity":1,"message":"481","line":2,"column":68,"nodeType":"420","messageId":"421","endLine":2,"endColumn":82},{"ruleId":"418","severity":1,"message":"482","line":2,"column":84,"nodeType":"420","messageId":"421","endLine":2,"endColumn":93},{"ruleId":"418","severity":1,"message":"465","line":2,"column":95,"nodeType":"420","messageId":"421","endLine":2,"endColumn":110},{"ruleId":"418","severity":1,"message":"483","line":2,"column":112,"nodeType":"420","messageId":"421","endLine":2,"endColumn":120},{"ruleId":"418","severity":1,"message":"457","line":3,"column":21,"nodeType":"420","messageId":"421","endLine":3,"endColumn":41},{"ruleId":"418","severity":1,"message":"507","line":3,"column":54,"nodeType":"420","messageId":"421","endLine":3,"endColumn":62},{"ruleId":"418","severity":1,"message":"467","line":3,"column":64,"nodeType":"420","messageId":"421","endLine":3,"endColumn":72},{"ruleId":"418","severity":1,"message":"508","line":3,"column":75,"nodeType":"420","messageId":"421","endLine":3,"endColumn":85},{"ruleId":"418","severity":1,"message":"458","line":3,"column":88,"nodeType":"420","messageId":"421","endLine":3,"endColumn":92},{"ruleId":"418","severity":1,"message":"509","line":3,"column":94,"nodeType":"420","messageId":"421","endLine":3,"endColumn":102},{"ruleId":"418","severity":1,"message":"469","line":3,"column":104,"nodeType":"420","messageId":"421","endLine":3,"endColumn":116},{"ruleId":"418","severity":1,"message":"470","line":3,"column":118,"nodeType":"420","messageId":"421","endLine":3,"endColumn":131},{"ruleId":"418","severity":1,"message":"510","line":5,"column":10,"nodeType":"420","messageId":"421","endLine":5,"endColumn":17},{"ruleId":"418","severity":1,"message":"511","line":5,"column":45,"nodeType":"420","messageId":"421","endLine":5,"endColumn":55},{"ruleId":"418","severity":1,"message":"512","line":7,"column":8,"nodeType":"420","messageId":"421","endLine":7,"endColumn":17},{"ruleId":"418","severity":1,"message":"424","line":8,"column":8,"nodeType":"420","messageId":"421","endLine":8,"endColumn":18},{"ruleId":"459","severity":1,"message":"460","line":35,"column":35,"nodeType":"461","messageId":"462","endLine":35,"endColumn":37},{"ruleId":"431","severity":1,"message":"432","line":36,"column":59,"nodeType":"433","messageId":"434","endLine":36,"endColumn":61},{"ruleId":"431","severity":1,"message":"436","line":52,"column":29,"nodeType":"433","messageId":"434","endLine":52,"endColumn":31},{"ruleId":"459","severity":1,"message":"460","line":92,"column":38,"nodeType":"461","messageId":"462","endLine":92,"endColumn":40},{"ruleId":"431","severity":1,"message":"436","line":103,"column":40,"nodeType":"433","messageId":"434","endLine":103,"endColumn":42},{"ruleId":"431","severity":1,"message":"432","line":122,"column":22,"nodeType":"433","messageId":"434","endLine":122,"endColumn":24},{"ruleId":"431","severity":1,"message":"436","line":123,"column":48,"nodeType":"433","messageId":"434","endLine":123,"endColumn":50},{"ruleId":"487","severity":1,"message":"488","line":128,"column":9,"nodeType":"489","messageId":"490","endLine":148,"endColumn":10},{"ruleId":"459","severity":1,"message":"460","line":158,"column":38,"nodeType":"461","messageId":"462","endLine":158,"endColumn":40},{"ruleId":"418","severity":1,"message":"491","line":159,"column":17,"nodeType":"420","messageId":"421","endLine":159,"endColumn":21},{"ruleId":"444","severity":1,"message":"445","line":169,"column":43,"nodeType":"446","endLine":169,"endColumn":99},{"ruleId":"431","severity":1,"message":"436","line":211,"column":43,"nodeType":"433","messageId":"434","endLine":211,"endColumn":45},{"ruleId":"431","severity":1,"message":"436","line":224,"column":59,"nodeType":"433","messageId":"434","endLine":224,"endColumn":61},{"ruleId":"431","severity":1,"message":"436","line":224,"column":101,"nodeType":"433","messageId":"434","endLine":224,"endColumn":103},{"ruleId":"431","severity":1,"message":"436","line":235,"column":53,"nodeType":"433","messageId":"434","endLine":235,"endColumn":55},{"ruleId":"418","severity":1,"message":"513","line":25,"column":7,"nodeType":"420","messageId":"421","endLine":25,"endColumn":16},{"ruleId":"431","severity":1,"message":"436","line":29,"column":29,"nodeType":"433","messageId":"434","endLine":29,"endColumn":31},{"ruleId":"431","severity":1,"message":"436","line":32,"column":35,"nodeType":"433","messageId":"434","endLine":32,"endColumn":37},{"ruleId":"431","severity":1,"message":"436","line":37,"column":33,"nodeType":"433","messageId":"434","endLine":37,"endColumn":35},{"ruleId":"431","severity":1,"message":"436","line":37,"column":58,"nodeType":"433","messageId":"434","endLine":37,"endColumn":60},"no-native-reassign",["514"],"no-negated-in-lhs",["515"],["514"],["515"],"no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","'useSelector' is defined but never used.","'test' is defined but never used.","'TablePanel' is defined but never used.","'getUserInfo' is defined but never used.","'removeItem' is defined but never used.","'Connector' is defined but never used.","'setPanelList' is assigned a value but never used.","'useEffect' is defined but never used.","'handleToggle' is assigned a value but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","'useDispatch' is defined but never used.","Expected '===' and instead saw '=='.","'TabPanel' is defined but never used.","'Settings' is defined but never used.","'match' is assigned a value but never used.","no-fallthrough","Expected a 'break' statement before 'case'.","SwitchCase","case","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-sequences","Unexpected use of comma operator.","SequenceExpression","unexpectedCommaExpression","'drawerWidth' is assigned a value but never used.","'MainPage' is defined but never used.","'setDisplayingPanel' is defined but never used.","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","'Paper' is defined but never used.","'AccountBalanceWallet' is defined but never used.","'Face' is defined but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","'classes' is assigned a value but never used.","'Button' is defined but never used.","'TablePagination' is defined but never used.","'TextField' is defined but never used.","'CheckBox' is defined but never used.","'Edit' is defined but never used.","'HighlightOff' is defined but never used.","'HourglassFull' is defined but never used.","'requestOrders' is defined but never used.","'setOrders' is defined but never used.","'setUser' is defined but never used.","'setRestaurantMenu' is defined but never used.","'handleChangePage' is assigned a value but never used.","'handleChangeRowsPerPage' is assigned a value but never used.","'value' is assigned a value but never used.","'Table' is defined but never used.","'TableBody' is defined but never used.","'TableCell' is defined but never used.","'TableContainer' is defined but never used.","'TableHead' is defined but never used.","'TableRow' is defined but never used.","no-redeclare","'temp' is already defined.","redeclared","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","'test' is assigned a value but never used.","no-dupe-keys","Duplicate key 'height'.","ObjectExpression","'AddCircle' is defined but never used.","'ItemDetailsPanel' is defined but never used.","'CheckCircle' is defined but never used.","'resClient' is defined but never used.","'setMenu' is defined but never used.","'addService' is defined but never used.","'removeService' is defined but never used.","'requestMenu' is defined but never used.","'MiniItemPanel' is defined but never used.","'rowsPerPage' is assigned a value but never used.","'page' is assigned a value but never used.","'DeleteForever' is defined but never used.","'Bookmark' is defined but never used.","'CheckSharp' is defined but never used.","'Fastfood' is defined but never used.","'addItem' is defined but never used.","'UpdateItem' is defined but never used.","'MenuPanel' is defined but never used.","'tempItems' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]